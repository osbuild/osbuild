#!/usr/bin/python3
"""
configure pacman
"""
import os
import sys

import osbuild.api


SCHEMA = """
"additionalProperties": false,
"properties": {
  "architecture": {
    "type": "string",
    "description": "pacman architecture",
    "default": "x86_64"
  },
  "repositories": {
    "type": "array",
    "items": {
      "type": "object",
      "oneOf": [
        { "required": ["name", "server"] },
        { "required": ["name", "include"] }
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "siglevels": {
          "type": "array",
          "minLength": 1,
          "maxLength": 2,
          "items": {
            "type": "string",
            "enum": ["Required", "Optional", "Never", "TrustAll", "TrustedOnly"]
          }
        },
        "server": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "default": "/etc/pacman.d/mirrorlist"
        }
      }
    }
  }
}
"""


def main(tree, options):
    arch = options.get("architecture", "x86_64")
    repositories = options.get("repositories", [])
    cfg = f"""
[options]
Architecture = {arch}
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
"""
    for repo in repositories:
        entry = f"[{repo['name']}]\n"
        siglevels = repo.get('siglevels', [])
        include = repo.get('include', '/etc/pacman.d/mirrorlist')
        if siglevels:
            siglevelstr = ' '.join(siglevels)
            entry += f"SigLevel = {siglevelstr}\n"
        if 'server' in repo:
            entry += f"Server = {repo['server']}\n"
        if 'include' in repo:
            entry += f"Include = {include}\n"
        cfg += entry + "\n"

    os.makedirs(os.path.join(tree, "etc"), exist_ok=True)
    cfgpath = os.path.join(tree, "etc", "pacman.conf")
    with open(cfgpath, "w", encoding="utf-8") as cfgfile:
        cfgfile.write(cfg)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
