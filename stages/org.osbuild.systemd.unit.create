#!/usr/bin/python3
import configparser
import sys

import osbuild.api


def validate(filename, cfg):
    # ensure the service name does not exceed maximum filename length
    if len(filename) > 255:
        raise ValueError(f"Error: the {filename} service exceeds the maximum filename length.")

    # Filename extension must match the config:
    #   .service requires a Service section
    #   .mount requires a Mount section
    if filename.endswith(".service") and "Service" not in cfg:
        raise ValueError(f"Error: {filename} unit requires Service section")
    if filename.endswith(".mount") and "Mount" not in cfg:
        raise ValueError(f"Error: {filename} unit requires Mount section")
    if filename.endswith(".socket") and "Socket" not in cfg:
        raise ValueError(f"Error: {filename} unit requires Socket section")
    if filename.endswith(".swap") and "Swap" not in cfg:
        raise ValueError(f"Error: {filename} unit requires Swap section")


def main(tree, options):
    filename = options["filename"]
    cfg = options["config"]
    validate(filename, cfg)

    # We trick configparser into letting us write multiple instances of the same option by writing them as keys with no
    # value, so we enable allow_no_value
    config = configparser.ConfigParser(allow_no_value=True, interpolation=None)
    # prevent conversion of the option name to lowercase
    config.optionxform = lambda option: option

    # In Python 3.14 configparser validates key contents and doesn't allow delimiters in them. Due to the hack several
    # lines above we explicitly use some interesting behavior to write duplicate keys by including the delimiter in them.
    # We need to disable the key validation check. Thanks to mrhoncok [1] for this workaround. In time we should probably
    # revisit how we write unit files because configparser isn't the best for this.
    # [1]: https://github.com/osbuild/osbuild/issues/2109#issuecomment-2964585958
    config._validate_key_contents = lambda key: None  # pylint: disable=protected-access

    for section, opts in cfg.items():
        if not config.has_section(section):
            config.add_section(section)
        for option, value in opts.items():
            if isinstance(value, list):
                for v in value:
                    if option == "Environment":
                        # Option value becomes "KEY=VALUE" (quoted)
                        v = '"' + v["key"] + "=" + str(v["value"]) + '"'
                    config.set(section, str(option) + "=" + str(v))
            else:
                config.set(section, option, str(value))
    persistent = options.get("unit-path", "usr")
    systemd_dir = str()
    if persistent == "usr":
        systemd_dir = f"{tree}/usr/lib/systemd"
    elif persistent == "etc":
        systemd_dir = f"{tree}/etc/systemd"

    unit_type = options.get("unit-type", "system")
    if unit_type == "system":
        systemd_dir += "/system"
    elif unit_type == "global":
        systemd_dir += "/user"

    with open(f"{systemd_dir}/{filename}", "w", encoding="utf8") as f:
        config.write(f, space_around_delimiters=False)


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
