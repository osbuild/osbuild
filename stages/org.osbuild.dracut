#!/usr/bin/python3
import contextlib
import os
import os.path
import subprocess
import sys

import osbuild.api
from osbuild.util.chroot import Chroot


def yesno(name: str, value: bool) -> str:
    prefix = "" if value else "no-"
    return f"--{prefix}{name}"


@contextlib.contextmanager
def bind_mount_logger(tree: str) -> None:
    logger_tree_path = os.path.join(tree, "usr/bin/logger")
    if not os.path.exists(logger_tree_path):
        # no logger -> nothing to do
        yield
        return
    # make logger a "noop"
    true_tree_path = os.path.join(tree, "usr/bin/true")
    subprocess.run(["mount", "--rbind", true_tree_path, logger_tree_path], check=True)
    try:
        yield
    finally:
        subprocess.run(["umount", logger_tree_path], check=False)


# pylint: disable=too-many-branches
def main(tree, options):
    kernels = options["kernel"]
    compress = options.get("compress")
    modules = options.get("modules", [])  # dracut modules
    add_modules = options.get("add_modules", [])
    omit_modules = options.get("omit_modules", [])
    drivers = options.get("drivers", [])  # kernel modules
    add_drivers = options.get("add_drivers", [])
    omit_drivers = options.get("omit_drivers", [])
    force_drivers = options.get("force_drivers", [])
    filesystems = options.get("filesystems", [])
    include = options.get("include", [])
    install = options.get("install", [])
    early_microcode = options.get("early_microcode", False)
    reproducible = options.get("reproducible", True)
    initoverlayfs = options.get("initoverlayfs", False)
    extra = options.get("extra", [])

    # initrds may have already been created, force the recreation
    opts = ["--force", "-v", "--show-modules"]

    opts += [
        yesno("early-microcode", early_microcode),
        yesno("reproducible", reproducible)
    ]

    if compress:
        opts += [f"--compress={compress}"]

    if modules:
        opts += ["--modules", " ".join(modules)]

    if add_modules:
        opts += ["--add", " ".join(add_modules)]

    if omit_modules:
        opts += ["--omit", " ".join(omit_modules)]

    if drivers:
        opts += ["--drivers", " ".join(drivers)]

    if add_drivers:
        opts += ["--add-drivers", " ".join(add_drivers)]

    if omit_drivers:
        opts += ["--omit-drivers", " ".join(omit_drivers)]

    if force_drivers:
        opts += ["--force-drivers", " ".join(force_drivers)]

    if filesystems:
        opts += ["--filesystems", " ".join(filesystems)]

    if include:
        for l in include:
            for k, v in l.items():
                opts += ["--include", k, v]

    if install:
        for i in install:
            opts += ["--install", i]

    opts += extra

    for kver in kernels:
        print(f"Building initramfs for {kver}", file=sys.stderr)

        initfs_bin = "/usr/bin/dracut"
        if initoverlayfs:
            initfs_bin = "/usr/bin/initoverlayfs-install"

        # the chroot.run() call below will mount /dev with "devtmpfs", this
        # is needed, see pr #1846 but it means we have likely have a
        #   /dev/log -> /run/systemd/journal/dev-log
        # symlink and dracut will try to log on it but end up writing
        # 5k of "logger: socket /dev/log: No such file or directory"
        # messages. See also issue #1976
        with bind_mount_logger(tree):
            with Chroot(tree) as chroot:
                chroot.run([initfs_bin, "--no-hostonly", "--kver", kver] + opts, check=True)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
