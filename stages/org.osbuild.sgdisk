#!/usr/bin/python3
import subprocess
import sys

import osbuild.api


class Partition:
    def __init__(self,
                 pttype: str = None,
                 partnum: int = None,
                 start: int = None,
                 size: int = None,
                 bootable: bool = False,
                 name: str = None,
                 uuid: str = None,
                 attrs: int = None):
        self.type = pttype
        self.partnum = partnum
        self.start = start
        self.size = size
        self.name = name
        self.uuid = uuid
        self.attrs = set([attrs] if attrs else [])

        if bootable:
            self.attrs.add(2)


class PartitionTable:
    def __init__(self, uuid, partitions):
        self.uuid = uuid
        self.partitions = partitions or []
        self.sector_size = 512

    def __getitem__(self, key) -> Partition:
        return self.partitions[key]

    def write_to(self, target, quote_partition_name):
        """Write the partition table to disk"""
        # generate the command for sfdisk to create the table

        command = [
            "sgdisk",
            "-Z",  # erase the partition table
            target,
            "-g",  # needed for older sgdisk
        ]

        if self.uuid:
            command += ["-U", self.uuid]

        for i, part in enumerate(self.partitions):
            idx = part.partnum if part.partnum else i + 1  # partitions are 1-indexed

            # format is 'partnum:start:end'
            size = "0"
            if part.size:
                size_bytes = part.size
                size = f"+{size_bytes}"

            cmd = [
                "-n", f"{idx}:{part.start}:{size}"

            ]

            if part.name:
                part_name = f'"{part.name}"' if quote_partition_name else part.name
                cmd += [
                    "-c", f"{idx}:{part_name}"
                ]

            if part.uuid:
                cmd += [
                    "-u", f"{idx}:{part.uuid}"
                ]

            if part.type:
                cmd += [
                    "-t", f"{idx}:{part.type}"
                ]

            if part.attrs:
                for attr in sorted(part.attrs):
                    cmd += [
                        "-A", f"{idx}:set:{attr}"
                    ]

            command += cmd

        subprocess.run(command,
                       encoding='utf8',
                       check=True)


def partition_from_json(js) -> Partition:
    p = Partition(pttype=js.get("type"),
                  partnum=js.get("partnum"),
                  start=js.get("start"),
                  size=js.get("size"),
                  bootable=js.get("bootable"),
                  name=js.get("name"),
                  uuid=js.get("uuid"),
                  attrs=js.get("attrs"))
    return p


def main(devices, options):
    device = devices["device"]["path"]

    ptuuid = options["uuid"]
    quote_partition_name = options.get("quote_partition_name", True)
    partitions = options.get("partitions")

    parts = [partition_from_json(p) for p in partitions]
    pt = PartitionTable(ptuuid, parts)

    pt.write_to(device, quote_partition_name)

    subprocess.run(["sgdisk", "-p", device],
                   encoding='utf8',
                   check=False)


if __name__ == '__main__':
    args = osbuild.api.arguments()
    ret = main(args["devices"], args["options"])
    sys.exit(ret)
