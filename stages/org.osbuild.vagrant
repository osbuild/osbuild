#!/usr/bin/python3
import json
import os
import subprocess
import sys

import osbuild.api


def parse_input(inputs):
    image = inputs["image"]
    files = image["data"]["files"]
    assert len(files) == 1

    filename, _ = files.popitem()
    filepath = os.path.join(image["path"], filename)
    return filepath


def main(tree, options, inputs):
    source = parse_input(inputs)
    # vagrant-libvirt expects box.img to be the qcow2 image
    # https://github.com/vagrant-libvirt/vagrant-libvirt/tree/master/example_box
    target = os.path.join(tree, "box.img")
    provider = options["provider"]
    subprocess.run(["cp", "-a", "--reflink=auto", source, target], check=True)

    metadata = {"provider": options["provider"]}
    if provider == "libvirt":
        metadata["format"] = "qcow2"
        # virtual image size as rounded numbwr
        data = json.loads(subprocess.check_output(["qemu-img", "info", "--output", "json", target]))
        metadata["virtual_size"] = data['virtual-size'] // 1000 ** 3

    vagrantfile = """
Vagrant.configure("2") do |config|
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
  end
end
"""
    open(f"{tree}/Vagrantfile", "w", encoding="utf8").write(vagrantfile)
    with open(f"{tree}/metadata.json", "w", encoding="utf8") as fp:
        json.dump(metadata, fp)


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"], args["inputs"])
    sys.exit(r)
