#!/usr/bin/python3
import os
import subprocess
import sys
import tempfile

from osbuild import api
from osbuild.util import ostree

# Corresponds to
# https://github.com/coreos/rpm-ostree/blob/7b9a20b20ecd5a2ceb11ca9edf86984dc3065183/rust/src/composepost.rs#L58
TOPLEVEL_DIRS = ["dev", "proc", "run", "sys", "sysroot", "var"]
# Corresponds to
# https://github.com/coreos/rpm-ostree/blob/7b9a20b20ecd5a2ceb11ca9edf86984dc3065183/rust/src/composepost.rs#L123
TOPLEVEL_LINKS = {
    "home": "var/home",
    "media": "run/media",
    "mnt": "var/mnt",
    "opt": "var/opt",
    "ostree": "sysroot/ostree",
    "root": "var/roothome",
    "srv": "var/srv",
}


def move(name, source, dest):
    os.rename(os.path.join(source, name), os.path.join(dest, name))


# See https://ostreedev.github.io/ostree/adapting-existing/
def init_rootfs(root, tmp_is_dir):
    """Initialize a root filesystem in OSTree layout."""

    fd = os.open(root, os.O_DIRECTORY)

    os.fchmod(fd, 0o755)

    for d in TOPLEVEL_DIRS:
        os.mkdir(d, mode=0o755, dir_fd=fd)
        os.chmod(d, mode=0o755, dir_fd=fd)

    for l, t in TOPLEVEL_LINKS.items():
        # <dir_fd>/l -> t
        os.symlink(t, l, dir_fd=fd)

    if tmp_is_dir:
        os.mkdir("tmp", mode=0o1777, dir_fd=fd)
        os.chmod("tmp", mode=0o1777, dir_fd=fd)
    else:
        os.symlink("tmp", "sysroot/tmp", dir_fd=fd)


def main(tree, options):
    etc_group_members = options.get("etc_group_members", [])
    initramfs = options.get("initramfs-args", [])
    tmp_is_dir = options.get("tmp-is-dir", True)

    # rpm-ostree will either ensure that machine-id is empty
    # when machineid-compat is 'true' is or will remove it
    # otherwise. Since we have to decide, detect the current
    # state and make rpm-ostree follow suit
    machineid_compat = os.path.exists(f"{tree}/etc/machine-id")
    print(f"ostree: machineid-compat: {machineid_compat}")

    # Move /etc to /usr
    os.rename(f"{tree}/etc", f"{tree}/usr/etc")

    # NB: need to create the temporary direct at the same
    # device as the tree is located on, so we can rename(2);
    # since tree is a bind mount, it basically means it
    # needs to be at the root of tree. So do that and then
    # filter that directory out when moving stuff
    with tempfile.TemporaryDirectory(dir=tree) as root:
        print("Moving tree to temporary root")
        for entry in os.scandir(tree):
            if entry.path == root:
                continue

            dest = os.path.join(root, entry.name)
            os.rename(entry.path, dest)

        print("Initializing new root filesystem")
        init_rootfs(tree, tmp_is_dir)

        print("Moving data back from temporary root")
        move("usr", root, tree)
        move("boot", root, tree)
        move("var", root, tree)

        # move /home over to /var in case it is not empty
        # rpm-ostree compose postprocess will convert the
        # home dirs (and sub-dirs) to systemd-tmpfiles.
        # NB: files and their content will not be converted

        if any(os.scandir(f"{root}/home")):
            move("home", root, f"{tree}/var")

        for name in ["bin", "lib", "lib32", "lib64", "sbin"]:
            if os.path.lexists(f"{root}/{name}"):
                move(name, root, tree)

    treefile = ostree.Treefile()
    treefile["boot-location"] = "new"
    treefile["machineid-compat"] = machineid_compat
    treefile["etc-group-members"] = etc_group_members
    treefile["initramfs-args"] = initramfs

    with treefile.as_tmp_file() as path:
        subprocess.run(["rpm-ostree", "compose", "postprocess",
                        tree, path],
                       check=True)


if __name__ == '__main__':
    args = api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
