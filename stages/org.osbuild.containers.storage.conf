#!/usr/bin/python3
import contextlib
import os
import sys
from typing import Dict

try:
    import toml
except ModuleNotFoundError:
    import pytoml as toml

import osbuild.api

DEFAULT_LOCATION = "/etc/containers/storage.conf"

HEADER = [
    "This file is the configuration file for all tools that",
    "use the containers/storage library.",
    ""
    "See 'man 5 containers-storage.conf' for more information.",
    ""
    "This file was created by osbuild."
]


def merge_config(section: str, data: Dict, config: Dict):
    """Merge the given section of config into data

    Items in config overwrite existing ones in data.
    New items will be added. Sections will be merged
    recursively.
    """
    want = config.get(section)

    if not want:
        return

    have = data.setdefault(section, {})

    for k in list(want.keys()):
        # if both entries are of type dict, we merge them
        # recursively, otherwise want will override have
        # via the update below.
        w, h = want[k], have.get(k)

        if isinstance(w, dict) and isinstance(h, dict):
            merge_config(k, have, want)
            del want[k]

    have.update(want)


def write_comment(f, comment: list):
    if not comment:
        return

    data = "\n".join(map(lambda c: f"# {c}", comment))
    f.write(data + "\n\n")


def main(tree, options):
    location = options.get("filename", DEFAULT_LOCATION)
    config = options["config"]
    comment = options.get("comment", [])
    filebase = options.get("filebase")

    path = os.path.join(tree, location.lstrip("/"))
    data = {}

    # if a filebase was specified, we use it as base
    if filebase:
        with open(filebase, "r", encoding="utf8") as f:
            data = toml.load(f)

    # if the target exists, we merge it
    with contextlib.suppress(FileNotFoundError):
        with open(path, "r", encoding="utf8") as f:
            have = toml.load(f)

            merge_config("storage", data, have)

    # now merge our configuration into data
    merge_config("storage", data, config)

    with open(path, "w", encoding="utf8") as f:
        write_comment(f, HEADER)
        write_comment(f, comment)

        toml.dump(data, f)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
