#!/usr/bin/python3
import contextlib
import os
import sys
from typing import Dict

import osbuild.api
from osbuild.util import toml

DEFAULT_LOCATION = "/etc/containers/storage.conf"

HEADER = [
    "This file is the configuration file for all tools that",
    "use the containers/storage library.",
    ""
    "See 'man 5 containers-storage.conf' for more information.",
    ""
    "This file was created by osbuild."
]


def merge_config(section: str, data: Dict, config: Dict):
    """Merge the given section of config into data

    Items in config overwrite existing ones in data.
    New items will be added. Sections will be merged
    recursively.
    """
    want = config.get(section)

    if not want:
        return

    have = data.setdefault(section, {})

    for k in list(want.keys()):
        # if both entries are of type dict, we merge them
        # recursively, otherwise want will override have
        # via the update below.
        w, h = want[k], have.get(k)

        if isinstance(w, dict) and isinstance(h, dict):
            merge_config(k, have, want)
            del want[k]

    have.update(want)


def main(tree, options):
    location = options.get("filename", DEFAULT_LOCATION)
    config = options["config"]
    comment = options.get("comment", [])
    filebase = options.get("filebase")

    path = os.path.join(tree, location.lstrip("/"))
    data = {}

    # if a filebase was specified, we use it as base
    if filebase:
        data = toml.load_from_file(filebase)

    # if the target exists, we merge it
    with contextlib.suppress(FileNotFoundError):
        have = toml.load_from_file(path)
        merge_config("storage", data, have)

    # now merge our configuration into data
    merge_config("storage", data, config)

    toml.dump_to_file(data, path, header=HEADER + ["\n"] + comment)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
