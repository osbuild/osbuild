#!/usr/bin/python3
"""
Edit containers-storage.conf(5) files.

This stage can be used to create or modify `containers-storage.conf`
configuration files. The default strategy is to merge the specified
options with the existing options.
"""

import contextlib
import os
import sys
from typing import Dict

try:
    import toml
except ModuleNotFoundError:
    import pytoml as toml


import osbuild.api


SCHEMA = r"""
"definitions": {
  "storage": {
    "type": "object",
    "additionalProperties": false,
    "minProperties": 1,
    "properties": {
      "driver": {
        "description": "container storage driver.",
        "type": "string",
        "enum": [
          "overlay",
          "vfs",
          "devmapper",
          "aufs",
          "btrfs",
          "zfs"
        ]
      },
      "graphroot": {
        "description": "container storage graph directory.",
        "type": "string"
      },
      "runroot": {
        "description": "container storage run directory.",
        "type": "string"
      }
    }
  },
  "storage-options": {
    "type": "object",
    "additionalProperties": false,
    "minProperties": 1,
    "properties": {
      "additionalimagestores": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "overlay": {
        "$ref": "#/definitions/storage-options-overlay"
      }
    }
  },
  "storage-options-overlay": {
    "type": "object",
    "additionalProperties": false,
    "minProperties": 1,
    "properties": {
      "mountopt": {
        "type": "string"
      }
    }
  }
},
"additionalProperties": false,
"required": ["config"],
"properties": {
  "filename": {
    "type": "string",
    "description": "location of the configuration file.",
    "default": "/etc/containers/storage.conf",
    "enum": [
      "/etc/containers/storage.conf",
      "/usr/share/containers/storage.conf"
    ]
  },
  "comment": {
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "config": {
    "additionalProperties": false,
    "type": "object",
    "description": "storage configuration",
    "minProperties": 1,
    "properties": {
      "storage": {
        "additionalProperties": false,
        "type": "object",
        "description": "storage configuration",
        "minProperties": 1,
        "properties": {
          "options": {
            "$ref": "#/definitions/storage-options"
          }
        }
      }
    }
  }
}
"""

DEFAULT_LOCATION = "/etc/containers/storage.conf"

HEADER = [
    "This file is the configuration file for all tools that",
    "use the containers/storage library.",
    ""
    "See 'man 5 containers-storage.conf' for more information.",
    ""
    "This file was created by osbuild."
]


def merge_config(section: str, data: Dict, config: Dict):
    want = config.get(section)
    have = data.get(section)

    if not want:
        return

    for k in list(want.keys()):
        if isinstance(want[k], dict):
            merge_config(k, have, want)
            del want[k]

    have.update(want)


def write_comment(f, comment: list):
    if not comment:
        return

    data = "\n".join(map(lambda c: f"# {c}", comment))
    f.write(data + "\n\n")


def main(tree, options):
    location = options.get("filename", DEFAULT_LOCATION)
    config = options["config"]
    comment = options.get("comment", [])

    path = os.path.join(tree, location.lstrip("/"))
    data = {}

    with contextlib.suppress(FileNotFoundError):
        with open(path, "r", encoding="utf-8") as f:
            data = toml.load(f)

    merge_config("storage", data, config)

    with open(path, "w", encoding="utf-8") as f:
        write_comment(f, HEADER)
        write_comment(f, comment)

        toml.dump(data, f)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
