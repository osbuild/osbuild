#!/usr/bin/python3
"""
Create an Anaconda kickstart file

Kickstart files are a way to program the Anaconda
installer.  This stage can be used to create such
a kickstart file at the location given by `path`.

Only a very limited set of available kickstart
commands are supported here.
"""

import os
import sys
from typing import Dict, List

import osbuild.api

SCHEMA = r"""
"additionalProperties": false,
"required": ["path"],
"properties": {
  "path": {
    "type": "string",
    "description": "Where to place the kickstart file"
  },
  "ostree": {
    "type": "object",
    "required": ["osname", "url", "ref"],
    "additionalProperties": false,
    "properties": {
      "osname": {
        "type": "string"
      },
      "url": {
        "type": "string"
      },
      "ref": {
        "type": "string"
      },
      "remote": {
        "type": "string",
        "description": "The remote to tie tie commit to"
      },
      "gpg": {
        "type": "boolean",
        "default": true
      }
    }
  },
  "liveimg": {
    "type": "object",
    "required": ["url"],
    "properties": {
      "url": {
        "type": "string"
      }
    }
  },
  "groups": {
    "type": "object",
    "additionalProperties": false,
    "description": "Keys are group names, values are objects with group info",
    "patternProperties": {
      "^[A-Za-z0-9_][A-Za-z0-9_-]{0,31}$": {
        "type": "object",
        "properties": {
          "gid": {
            "type": "number",
            "description": "GID for this group"
          }
        }
      }
    }
  },
  "users": {
    "additionalProperties": false,
    "type": "object",
    "description": "Keys are usernames, values are objects giving user info.",
    "patternProperties": {
      "^[A-Za-z0-9_][A-Za-z0-9_-]{0,31}$": {
        "type": "object",
        "properties": {
          "uid": {
            "description": "User UID",
            "type": "number"
          },
          "gid": {
            "description": "User GID",
            "type": "number"
          },
          "groups": {
            "description": "Array of group names for this user",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "description": "User account description (or full name)",
            "type": "string"
          },
          "home": {
            "description": "Path to user's home directory",
            "type": "string"
          },
          "shell": {
            "description": "User's login shell",
            "type": "string"
          },
          "password": {
            "description": "User's encrypted password, as returned by crypt(3)",
            "type": "string"
          },
          "key": {
            "description": "SSH Public Key to add to ~/.ssh/authorized_keys",
            "type": "string"
          }
        }
      }
    }
  },
  "lang": {
    "type": "string",
    "description": "The language code (e.g. en_US.UTF-8)"
  },
  "keyboard": {
    "type": "string",
    "description": "The keyboard map (e.g. us)"
  },
  "timezone": {
    "type": "string",
    "description": "The timezone (e.g. UTC)"
  },
  "zerombr": {
    "type": "boolean",
    "description": "Reinitialize Partition Tables"
  },
  "clearpart": {
    "description": "Removes partitions from the system, prior to creation of new partitions",
    "type": "object",
    "properties": {
      "all": {
        "description": "Erases all partitions from the system",
        "type": "boolean"
      },
      "drives": {
        "description": "Specifies which drives to clear partitions from",
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^[A-Za-z0-9/:\\_|*-]+$"
        }
      },
      "list": {
        "description": "Specifies which partitions to clear",
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^[A-Za-z0-9]+$"
        }
      },
      "disklabel": {
        "description": "Create a set disk label when relabeling a disk",
        "type": "string",
        "pattern": "^[A-Za-z0-9_-]+$"
      },
      "linux": {
        "description": "Erases all Linux partitions",
        "type": "boolean"
      }
    }
  },
  "reboot": {
    "description": "Reboot after the installation is successfully completed",
    "oneOf": [
    {
      "type": "boolean"
    }, {
      "type": "object",
      "additionalProperties": false,
      "anyOf": [{"required": ["eject"]}, {"required": ["kexec"]}],
      "properties": {
        "eject": {
          "description": "Attempt to eject the installation media before rebooting",
          "type": "boolean"
        },
        "kexec": {
          "description": "Use this option to reboot into the new system using the kexec",
          "type": "boolean"
        }
      }
    }]
  }
}
"""


def make_groups(groups: Dict) -> List[str]:
    # group --name NAME [--gid GID]

    res = []

    for name, opts in groups.items():
        gid = opts.get("gid")

        arguments = [f"group --name {name}"]
        if gid:
            arguments += ["--gid", str(gid)]

        res.append(" ".join(arguments))

    return res


def make_users(users: Dict) -> List[str]:
    # user [--homedir HOMEDIR] [--iscrypted] --name NAME [--password PASSWORD]
    # [--shell SHELL] [--uid INT] [--lock] [--plaintext] [--gecos GECOS]
    # [--gid INT] [--groups GROUPS]

    res = []

    for name, opts in users.items():

        arguments = [f"user --name {name}"]

        password = opts.get("password")
        if password is not None:
            arguments += ["--password", password or '""', "--iscrypted"]

        shell = opts.get("shell")
        if shell:
            arguments += ["--shell", shell]

        uid = opts.get("uid")
        if uid is not None:
            arguments += ["--uid", str(uid)]

        gid = opts.get("gid")
        if gid is not None:
            arguments += ["--gid", str(gid)]

        groups = opts.get("groups")
        if groups:
            arguments += ["--groups", ",".join(groups)]

        home = opts.get("home")
        if home:
            arguments += ["--homedir", home]

        res.append(" ".join(arguments))

        key = opts.get("key")
        if key:
            res.append(f'sshkey --username {name} "{key}"')

    return res


def make_clearpart(options: Dict) -> str:
    clearpart = options.get("clearpart")
    if clearpart is None:
        return ""
    cmd = "clearpart"
    al = clearpart.get("all", False)
    if al:
        cmd += " --all"
    drives = clearpart.get("drives", [])
    if drives:
        cmd += f" --drives={','.join(drives)}"
    li = clearpart.get("list", [])
    if li:
        cmd += f" --list={','.join(li)}"
    disklabel = clearpart.get("disklabel", "")
    if disklabel:
        cmd += f" --disklabel={disklabel}"
    linux = clearpart.get("linux", False)
    if linux:
        cmd += " --linux"
    return cmd


def make_reboot(options):
    reboot = options.get("reboot", None)
    if not reboot:
        return ""
    cmd = "reboot"
    if isinstance(reboot, dict):
        if reboot.get("eject"):
            cmd += " --eject"
        if reboot.get("kexec"):
            cmd += " --kexec"
    return cmd


def main(tree, options):
    path = options["path"].lstrip("/")
    ostree = options.get("ostree")

    config = []

    if ostree:
        osname, url, ref = ostree["osname"], ostree["url"], ostree["ref"]
        remote = ostree.get("remote")

        cmd = f"ostreesetup --osname={osname} --url={url} --ref={ref}"

        if remote:
            cmd += " --remote=" + remote
        if not ostree.get("gpg", True):
            cmd += " --nogpg"

        config += [cmd]

    liveimg = options.get("liveimg")
    if liveimg:
        url = liveimg["url"]
        config += [f"liveimg --url {url}"]

    config += make_groups(options.get("groups", {}))
    config += make_users(options.get("users", {}))

    lang = options.get("lang")
    if lang:
        config += [f"lang {lang}"]
    keyboard = options.get("keyboard")
    if keyboard:
        config += [f"keyboard {keyboard}"]
    tz = options.get("timezone")
    if tz:
        config += [f"timezone {tz}"]
    zerombr = options.get("zerombr")
    if zerombr:
        config += ["zerombr"]
    clearpart = make_clearpart(options)
    if clearpart:
        config += [clearpart]

    reboot = make_reboot(options)
    if reboot:
        config += [reboot]

    target = os.path.join(tree, path)
    base = os.path.dirname(target)
    os.makedirs(base, exist_ok=True)

    with open(target, "w", encoding="utf8") as f:
        if config:
            f.write("\n".join(config))
        f.write("\n")

    print(f"created kickstarted at: {path}\n")
    with open(target, "r", encoding="utf8") as f:
        print(f.read())

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
