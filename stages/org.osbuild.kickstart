#!/usr/bin/python3
import os
import sys
from typing import Dict, List

import osbuild.api


def make_groups(groups: Dict) -> List[str]:
    # group --name NAME [--gid GID]

    res = []

    for name, opts in groups.items():
        gid = opts.get("gid")

        arguments = [f"group --name {name}"]
        if gid:
            arguments += ["--gid", str(gid)]

        res.append(" ".join(arguments))

    return res


def make_users(users: Dict) -> List[str]:
    # user [--homedir HOMEDIR] [--iscrypted] --name NAME [--password PASSWORD]
    # [--shell SHELL] [--uid INT] [--lock] [--plaintext] [--gecos GECOS]
    # [--gid INT] [--groups GROUPS]

    res = []

    for name, opts in users.items():

        arguments = [f"user --name {name}"]

        password = opts.get("password")
        if password is not None:
            arguments += ["--password", password or '""', "--iscrypted"]

        shell = opts.get("shell")
        if shell:
            arguments += ["--shell", shell]

        uid = opts.get("uid")
        if uid is not None:
            arguments += ["--uid", str(uid)]

        gid = opts.get("gid")
        if gid is not None:
            arguments += ["--gid", str(gid)]

        groups = opts.get("groups")
        if groups:
            arguments += ["--groups", ",".join(groups)]

        home = opts.get("home")
        if home:
            arguments += ["--homedir", home]

        res.append(" ".join(arguments))

        key = opts.get("key")
        if key:
            res.append(f'sshkey --username {name} "{key}"')

    return res


def make_rootpw(rootpw: Dict) -> str:
    arguments = []
    for option in ["lock", "plaintext", "iscrypted", "allow_ssh", "password"]:
        option_value = rootpw.get(option)
        if option_value is True:
            arguments.append(f"--{option.replace('_', '-')}")
        elif isinstance(option_value, str) and option_value:
            arguments.append(option_value)
    if arguments:
        return f"rootpw {' '.join(arguments)}"
    return ""


def make_clearpart(options: Dict) -> str:
    clearpart = options.get("clearpart")
    if clearpart is None:
        return ""
    cmd = "clearpart"
    al = clearpart.get("all", False)
    if al:
        cmd += " --all"
    drives = clearpart.get("drives", [])
    if drives:
        cmd += f" --drives={','.join(drives)}"
    li = clearpart.get("list", [])
    if li:
        cmd += f" --list={','.join(li)}"
    disklabel = clearpart.get("disklabel", "")
    if disklabel:
        cmd += f" --disklabel={disklabel}"
    linux = clearpart.get("linux", False)
    if linux:
        cmd += " --linux"
    initlabel = clearpart.get("initlabel", False)
    if initlabel:
        cmd += " --initlabel"
    return cmd


def make_reboot(options):
    reboot = options.get("reboot", None)
    if not reboot:
        return ""
    cmd = "reboot"
    if isinstance(reboot, dict):
        if reboot.get("eject"):
            cmd += " --eject"
        if reboot.get("kexec"):
            cmd += " --kexec"
    return cmd


def make_autopart(options: Dict) -> str:
    autopart = options.get("autopart")
    if autopart is None:
        return ""
    cmd = "autopart"
    for key in ["type", "fstype", "nolvm", "encrypted", "passphrase",
                "escrowcert", "backuppassphrase", "cipher", "luks-version",
                "pbkdf", "pbkdf-memory", "pbkdf-time", "pbkdf-iterations", "nohome",
                "noswap"]:
        if key not in autopart:
            continue
        val = autopart[key]
        if isinstance(val, bool):
            cmd += f" --{key}"
        else:
            cmd += f" --{key}={val}"
    return cmd


def make_network(options: Dict) -> List[str]:
    networks = options.get("network")
    if networks is None:
        return []
    res = []
    for net in networks:
        cmd = "network"
        # simple string options
        for key in [
                "device", "bootproto", "onboot", "ip", "ipv6", "gateway",
                "ipv6gateway", "netmask", "hostname", "essid", "wpakey",
        ]:
            if key not in net:
                continue
            val = net.get(key)
            cmd += f" --{key}={val}"
        # nameservers is a list
        nameservers = net.get("nameservers")
        if nameservers:
            nss = " ".join([f"--nameserver={ns}" for ns in nameservers])
            cmd += f" {nss}"
        # activate can be true/false/unset
        activate = net.get("activate")
        if isinstance(activate, bool):
            if activate:
                cmd += " --activate"
            else:
                cmd += " --no-activate"
        res += [cmd]
    return res


def main(tree, options):  # pylint: disable=too-many-branches
    path = options["path"].lstrip("/")
    ostree = options.get("ostree")

    config = []

    if ostree:
        osname, url, ref = ostree["osname"], ostree["url"], ostree["ref"]
        remote = ostree.get("remote")

        cmd = f"ostreesetup --osname={osname} --url={url} --ref={ref}"

        if remote:
            cmd += " --remote=" + remote
        if not ostree.get("gpg", True):
            cmd += " --nogpg"

        config += [cmd]

    ostreecontainer = options.get("ostreecontainer")

    if ostreecontainer:
        url = ostreecontainer["url"]

        cmd = f"ostreecontainer --url={url}"

        for name in ["stateroot", "transport", "remote"]:
            value = ostreecontainer.get(name)
            if value:
                cmd += f" --{name}={value}"

        signature_verification = ostreecontainer.get("signatureverification", True)
        if not signature_verification:
            cmd += " --no-signature-verification"

        config += [cmd]

    liveimg = options.get("liveimg")
    if liveimg:
        url = liveimg["url"]
        config += [f"liveimg --url {url}"]

    config += make_groups(options.get("groups", {}))
    config += make_users(options.get("users", {}))
    rootpw_command = make_rootpw(options.get("rootpw", {}))
    if rootpw_command:
        config += [rootpw_command]

    lang = options.get("lang")
    if lang:
        config += [f"lang {lang}"]
    keyboard = options.get("keyboard")
    if keyboard:
        config += [f"keyboard {keyboard}"]
    tz = options.get("timezone")
    if tz:
        config += [f"timezone {tz}"]
    zerombr = options.get("zerombr")
    if zerombr:
        config += ["zerombr"]
    clearpart = make_clearpart(options)
    if clearpart:
        config += [clearpart]
    display_mode = options.get("display_mode")
    if display_mode:
        config += [display_mode]
    autopart = make_autopart(options)
    if autopart:
        config += [autopart]
    reboot = make_reboot(options)
    if reboot:
        config += [reboot]
    config += make_network(options)
    kargs_append = options.get("bootloader", {}).get("append")
    if kargs_append:
        config += [f"bootloader --append='{kargs_append}'"]

    target = os.path.join(tree, path)
    base = os.path.dirname(target)
    os.makedirs(base, exist_ok=True)

    with open(target, "w", encoding="utf8") as f:
        if config:
            f.write("\n".join(config))
        f.write("\n")

    print(f"created kickstarted at: {path}\n")
    with open(target, "r", encoding="utf8") as f:
        print(f.read())

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
