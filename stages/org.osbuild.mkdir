#!/usr/bin/python3
"""
Create directories within the tree.

Can create one or more directories, optionally also the
intermediate directories. The stage can gracefully handle
directories that already exist.

Please note that the stage won't change the mode of existing
directories. If you want to change the mode of an existing
directory, you need to use the `org.osbuild.chmod` stage.
Mode is applied only to newly created directories and umask
value is taken into account.

In the initial version of this stage, there was a bug that caused
the stage to accept relative paths. This behaviour is kept for
backward compatibility, thus the following paths are equal:

/path/to/directory
path/to/directory

However, using relative paths is strongly discouraged.
"""

import os
import sys

import osbuild.api
from osbuild.util.path import in_tree

SCHEMA_2 = r"""
"options": {
  "additionalProperties": false,
  "properties": {
    "paths": {
      "type": "array",
      "additionalItems": false,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "required": ["path"],
        "properties": {
          "path": {
            "type": "string",
            "pattern": "^\\/?(?!\\.\\.)((?!\\/\\.\\.\\/).)+$"
          },
          "mode": {
            "type": "number",
            "description": "Numeric octal mode"
          },
          "parents": {
            "type": "boolean",
            "description": "Create intermediate directories",
            "default": false
          },
          "exist_ok": {
            "type": "boolean",
            "description": "Do not fail if the directory already exists",
            "default": false
          }
        }
      }
    }
  }
}
"""


def main(tree, options):
    for item in options["paths"]:
        path = item["path"]
        mode = item.get("mode", 0o777)
        parents = item.get("parents", False)
        exist_ok = item.get("exist_ok", False)

        if not path.startswith("/"):
            print("WARNING: relative path used, this is discouraged!")

        target = os.path.join(tree, path.lstrip("/"))
        if not in_tree(target, tree):
            raise ValueError(f"path {path} not in tree")

        if parents:
            os.makedirs(target, mode=mode, exist_ok=exist_ok)
        else:
            try:
                os.mkdir(target, mode)
            except FileExistsError:
                if not exist_ok:
                    raise

    return 0


if __name__ == "__main__":
    args = osbuild.api.arguments()
    sys.exit(main(args["tree"], args["options"]))
