#!/usr/bin/python3
import os
import subprocess
import sys

import osbuild.api


def main(devices, options):
    device = devices["device"]
    passphrase = options["passphrase"]
    device_uuid = options["uuid"]
    pbkdf = options["pbkdf"]
    cipher = options.get("cipher")
    label = options.get("label")
    integrity = options.get("integrity")
    subsystem = options.get("subsystem", "")
    sector_size = options.get("sector-size")
    path = os.path.join("/dev", device["path"])

    command = [
        "cryptsetup",
        "-q",  # batch mode
        "--uuid", device_uuid,
        "luksFormat",
        "--type", "luks2",
        "--force-password"
    ]

    if cipher:
        command += ["--cipher", cipher]

    if label:
        command += ["--label", label, "--subsystem", subsystem]

    if sector_size:
        command += ["--sector-size", str(sector_size)]

    if integrity:
        command += ["--integrity", integrity]

    # password base key derivation function parameters
    command += [
        "--pbkdf", pbkdf["method"],
        "--pbkdf-force-iterations", str(pbkdf["iterations"])
    ]

    memory = pbkdf.get("memory", 32)
    if memory:
        command += ["--pbkdf-memory", str(memory)]

    parallelism = pbkdf.get("parallelism", 1)
    if parallelism:
        command += ["--pbkdf-parallel", str(parallelism)]

    subprocess.run(command + [path],
                   encoding='utf8', check=True,
                   input=passphrase)


if __name__ == '__main__':
    args = osbuild.api.arguments()
    ret = main(args["devices"], args["options"])
    sys.exit(ret)
