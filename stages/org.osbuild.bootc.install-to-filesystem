#!/usr/bin/python3
"""
Run bootc install to-filesystem

Note that this needs the disk.img in the inputs as one continous
devices so that bootupd can install grub to the mbr. It also needs
all relevant mount points for booting (e.g. /boot, /boot/efi) in
mounted in the "mounts" path.

Buildhost commands used: bootc
"""

import subprocess
import sys
import tempfile

import osbuild.api
from osbuild.util import containers

CAPABILITIES = ["CAP_MAC_ADMIN"]

SCHEMA_2 = r"""
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "required": ["images"],
  "properties": {
    "images": {
      "type": "object",
      "additionalProperties": true
    }
  }
},
"options": {
  "additionalProperties": false,
  "properties": {
    "root-ssh-authorized-keys": {
      "description": "array of SSH Public Keys to add to roots authorized_keys",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "kernel-args": {
      "description": "array of additional kernel arguments",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
},
"devices": {
  "type": "object",
  "additionalProperties": true
},
"mounts": {
  "type": "array"
}
"""


def main(options, inputs, paths):
    images = containers.parse_containers_input(inputs)
    assert len(images) == 1
    image = list(images.values())[0]

    with containers.container_source(image) as (_, source):
        dst = paths["mounts"]
        pargs = ["bootc", "install", "to-filesystem",
                 "--source-imgref", source,
                 "--skip-fetch-check", "--generic-image"]
        # customize root
        root_ssh_keys = options.get("root-ssh-authorized-keys", [])
        if root_ssh_keys:
            tmpf = tempfile.NamedTemporaryFile(prefix="bootc-ssh-auth-keys-")
            for key in root_ssh_keys:
                tmpf.write(key.encode("utf8") + b"\n")
            tmpf.flush()
            pargs.extend(["--root-ssh-authorized-keys", tmpf.name])
        # customize kernel-args
        for karg in options.get("kernel-args", []):
            pargs.extend(["--karg", karg])
        # add target and go
        pargs.append(dst)
        subprocess.run(pargs, check=True)


if __name__ == "__main__":
    args = osbuild.api.arguments()
    r = main(args["options"], args["inputs"], args["paths"])
    sys.exit(r)
