#!/usr/bin/python3
import json
import os
import sys
import tempfile

import libdnf5

import osbuild
from osbuild.util.sbom.dnf5 import dnf_pkgset_to_sbom_pkgset
from osbuild.util.sbom.spdx import sbom_pkgset_to_spdx2_doc


def get_installed_packages(tree):
    with tempfile.TemporaryDirectory() as tempdir:
        base = libdnf5.base.Base()

        conf = base.get_config()
        conf.installroot = tree
        conf.config_file_path = f"{tree}{conf.config_file_path}"
        conf.pluginpath = f"{tree}{conf.pluginpath}"
        conf.pluginconfpath = f"{tree}{conf.pluginconfpath}"
        conf.persistdir = f"{tree}{conf.persistdir}"
        conf.transaction_history_dir = f"{tree}{conf.transaction_history_dir}"
        conf.system_cachedir = f"{tempdir}{conf.system_cachedir}"
        conf.varsdir = [f"{tree}{d}" for d in conf.varsdir]
        conf.reposdir = [f"{tree}{d}" for d in conf.reposdir]
        conf.cachedir = f"{tempdir}{conf.cachedir}"

        if os.path.exists(f"{tree}{conf.system_state_dir}"):
            conf.system_state_dir = f"{tree}{conf.system_state_dir}"
        else:
            # NB: if the directory does not exist in the tree, DNF5 would create it.
            # We need to ensure that the stage does not taint the tree with directories
            # created as a side effect.
            # See man dnf5-system-state(7) for more information.
            conf.system_state_dir = ""

        base.setup()

        repo_sack = base.get_repo_sack()
        repo_sack.create_repos_from_reposdir()
        repo_sack.load_repos(libdnf5.repo.Repo.Type_SYSTEM)

        query = libdnf5.rpm.PackageQuery(base)
        query.filter_installed()

        # NB: return the base object as well, to workaround a bug in libdnf5:
        # https://github.com/rpm-software-management/dnf5/issues/1748
        return base, query


def main(inputs, tree, options):
    config = options["config"]
    doc_path = config["doc_path"]

    tree_to_analyze = tree
    if inputs:
        tree_to_analyze = inputs["root-tree"]["path"]

    _, installed = get_installed_packages(tree_to_analyze)
    bom_pkgset = dnf_pkgset_to_sbom_pkgset(installed)
    spdx2_doc = sbom_pkgset_to_spdx2_doc(bom_pkgset)
    spdx2_json = spdx2_doc.to_dict()

    with open(f"{tree}{doc_path}", "w", encoding="utf-8") as f:
        json.dump(spdx2_json, f)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args.get("inputs", {}), args["tree"], args["options"])
    sys.exit(r)
