#!/usr/bin/python3
import datetime
import json
import os
import subprocess
import sys
import tempfile
import time

import osbuild.api

DEFAULT_PATH = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

MEDIA_TYPES = {
    "layer": "application/vnd.oci.image.layer.v1.tar",
    "manifest": "application/vnd.oci.image.manifest.v1+json",
    "config": "application/vnd.oci.image.config.v1+json"
}

# The extended attributes that should be recorded for the
# contents of file system layers:
#  - user.*: user specified extended attributes
#  - security.ima: Integrity Measurement Architecture (IMA)
#  - security.capability: Linux capabilities(7)
XATTRS_WANT = r"^(user.|security\.ima|security\.capability)"


def sha256sum(path: str) -> str:
    ret = subprocess.run(["sha256sum", path],
                         stdout=subprocess.PIPE,
                         encoding="utf8",
                         check=True)

    return ret.stdout.strip().split(" ")[0]


def blobs_add_file(blobs: str, path: str, mtype: str):
    digest = sha256sum(path)
    size = os.stat(path).st_size

    os.rename(path, os.path.join(blobs, digest))
    info = {
        "digest": "sha256:" + digest,
        "size": size,
        "mediaType": MEDIA_TYPES[mtype]
    }

    print(f"blobs: +{mtype} ({size}, {digest})")
    return info


def blobs_add_json(blobs: str, js: str, mtype: str):
    js_file = os.path.join(blobs, "temporary.js")
    with open(js_file, "w", encoding="utf8") as f:
        json.dump(js, f)

    return blobs_add_file(blobs, js_file, mtype)


def blobs_add_layer(blobs: str, tree: str):
    compression = "gzip"

    layer_file = os.path.join(blobs, "layer.tar")

    command = [
        "tar",
        # Sort for better reproduceability
        "--sort=name",
        "--no-selinux",
        "--acls",
        "--xattrs",
        "--xattrs-include=" + XATTRS_WANT,
        # Enforce standard format
        "--format=posix",
        # Drop atime and ctime for better reproduceability
        "--pax-option", "delete=atime,delete=ctime",
        "-cf", layer_file,
        "-C", tree,
    ] + os.listdir(tree)

    print("creating layer")
    subprocess.run(command,
                   stdout=subprocess.DEVNULL,
                   check=True)

    digest = "sha256:" + sha256sum(layer_file)

    print("compressing layer")
    suffix = ".compressed"
    subprocess.run([compression,
                    "-S", suffix,
                    layer_file],
                   stdout=subprocess.DEVNULL,
                   check=True)

    layer_file += suffix

    info = blobs_add_file(blobs, layer_file, "layer")
    info["mediaType"] += "+" + compression

    return digest, info


def config_from_options(options):
    command = options.get("Cmd", ["sh"])
    env = options.get("Env", ["PATH=" + DEFAULT_PATH])

    config = {
        "Env": env,
        "Cmd": command
    }

    for name in ["Entrypoint", "User", "Labels", "StopSignal", "WorkingDir"]:
        item = options.get(name)
        if item:
            config[name] = item

    for name in ["ExposedPorts", "Volumes"]:
        item = options.get(name)
        if item:
            config[name] = {x: {} for x in item}

    print(config)
    return config


def create_oci_dir(inputs, output_dir, options, create_time):
    architecture = options["architecture"]

    created = create_time.isoformat()

    config = {
        "created": created,
        "architecture": architecture,
        "os": "linux",
        "config": config_from_options(options.get("config", {})),
        "rootfs": {
            "type": "layers",
            "diff_ids": []
        },
        "history": []
    }

    manifest = {
        "schemaVersion": 2,
        "config": None,
        "layers": []
    }

    annotations = options.get("annotations", {})
    if annotations:
        manifest["annotations"] = annotations

    index = {
        "schemaVersion": 2,
        "manifests": []
    }

    blobs = os.path.join(output_dir, "blobs", "sha256")
    os.makedirs(blobs)

    # layers / rootfs
    for ip in sorted(inputs.keys()):
        tree = inputs[ip]["path"]
        digest, info = blobs_add_layer(blobs, tree)

        manifest["layers"].append(info)
        config["rootfs"]["diff_ids"] = [digest]
        config["history"].append({
            "created": created,
            "created_by": f"/bin/sh -c #(nop) osbuild input '{ip}'"
        })

    # write config
    info = blobs_add_json(blobs, config, "config")
    manifest["config"] = info

    # manifest
    info = blobs_add_json(blobs, manifest, "manifest")
    index["manifests"].append(info)

    # index
    print("writing index")
    index_path = os.path.join(output_dir, "index.json")
    with open(index_path, "w", encoding="utf8") as f:
        json.dump(index, f)

    # oci-layout tag
    layout_path = os.path.join(output_dir, "oci-layout")
    with open(layout_path, "w", encoding="utf8") as f:
        json.dump({"imageLayoutVersion": "1.0.0"}, f)


def main(inputs, output_dir, options, meta):
    filename = options["filename"]

    source_time = int(meta.get("source-epoch", time.time()))
    create_time = datetime.datetime.fromtimestamp(source_time, datetime.timezone.utc)
    with tempfile.TemporaryDirectory(dir=output_dir) as tmpdir:
        workdir = os.path.join(tmpdir, "output")
        os.makedirs(workdir)

        create_oci_dir(inputs, workdir, options, create_time)

        # This sorts by name and removes various metadata to make
        # the tarfile reproducible
        command = [
            "tar",
            "--remove-files",
            "--sort=name",
            "--no-selinux",
            "--no-xattrs",
            "--no-acls",
            "--owner=0",
            "--group=0",
            "--numeric-owner",
            "--mode=go=rX,u+rw,a-s",
            "--format=posix",
            f"--mtime=@{int(create_time.timestamp())}",
            "--pax-option", "delete=atime,delete=ctime",
            "-cf", os.path.join(output_dir, filename),
            f"--directory={workdir}",
        ] + os.listdir(workdir)

        print("creating final archive")
        subprocess.run(command,
                       stdout=subprocess.DEVNULL,
                       check=True)


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"], args["options"], args["meta"])
    sys.exit(r)
