#!/usr/bin/python3

import contextlib
import json
import os
import pathlib
import subprocess
import sys
import tempfile

import osbuild.sources

STAGE_DESC = "Verify, and install RPM packages"
STAGE_INFO = """
Verify, and install RPM packages.

`gpgkeys` should be an array of strings containing each GPG key to be used
to verify the packages.

`packages` is an array of RPM checksums. Specifically, the content hash of
the rpms, not the chucksums found in the rpm header.

This stage will fail if any of the packages can't be found, or if any
RPM has a signature or digest that cannot be verified.

NOTE: this stage currently does _not_ fail if a package is unsigned, only if
the package is signed but the signature cannot be verified. A future version
of this stage will fail on unsigned packages by default, but may support a
flag to skip signature checks for packages that are known to be unsigned.

Uses the following binaries from the host:
    * `rpmkeys` to import keys and to verify signatures for each package
    * `sh`, `mkdir`, `mount`, `chmod` to prepare the target tree for `rpm`
    * `rpm` to install packages into the target tree
"""
STAGE_OPTS = """
"properties": {
  "gpgkeys": {
    "description": "Array of GPG key contents to import",
    "type": "array",
    "items": { "type": "string" }
  },
  "packages": {
    "description": "Array of RPM content hashes",
    "type": "array",
    "items": {
      "type": "string",
      "description": ".rpm file checksum, prefixed with 'md5:', 'sha1:', 'sha256:', 'sha384:', or 'sha512:', indicating the algorithm used."
    }
  }
}
"""


def main(tree, sources, options):
    packages = options.get("packages", [])
    for key in options.get("gpgkeys", []):
        with tempfile.NamedTemporaryFile(prefix="gpgkey.", mode="w") as keyfile:
            keyfile.write(key)
            keyfile.flush()
            subprocess.run([
                "rpmkeys",
                "--root", tree,
                "--import", keyfile.name
            ], check=True)

    osbuild.sources.get("org.osbuild.files", packages)

    script = f"""
        set -e
        mkdir -p {tree}/dev {tree}/sys {tree}/proc
        mount -o bind /dev {tree}/dev
        mount -o bind /sys {tree}/sys
        mount -o bind /proc {tree}/proc
    """

    machine_id_set_previously = os.path.exists(f"{tree}/etc/machine-id")
    if not machine_id_set_previously:
        # create a fake machine ID to improve reproducibility
        print("creating a fake machine id")
        script += f"""
            mkdir -p {tree}/etc
            echo "ffffffffffffffffffffffffffffffff" > {tree}/etc/machine-id
            chmod 0444 {tree}/etc/machine-id
        """

    subprocess.run(["/bin/sh", "-c", script], check=True)

    with tempfile.NamedTemporaryFile(prefix="manifest.", mode='w') as manifest:
        manifest.writelines(p+'\n' for p in packages)
        manifest.flush()
        subprocess.run([
            "rpm",
            "--root", tree,
            # Make rpm require valid signatures & digests on packages.
            # (see /usr/lib/rpm/macros for more info)
            "--define", "_pkgverify_level all",
            "--install", manifest.name
        ], cwd=f"{sources}/org.osbuild.files", check=True)

    # remove temporary machine ID if it was created by us
    if not machine_id_set_previously:
        print("deleting the fake machine id")
        machine_id_file = pathlib.Path(f"{tree}/etc/machine-id")
        machine_id_file.unlink()
        machine_id_file.touch()

    # remove random seed from the tree if exists
    with contextlib.suppress(FileNotFoundError):
        os.unlink(f"{tree}/var/lib/systemd/random-seed")

    return 0


if __name__ == '__main__':
    args = json.load(sys.stdin)
    r = main(args["tree"], args["sources"], args["options"])
    sys.exit(r)
