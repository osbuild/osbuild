#!/usr/bin/python3
import os
import sys

import osbuild.api


# sysconfig uses yes and no instead of true and false
def bool_to_string(value):
    return "yes" if value else "no"


def configure_livesys(tree, livesys_options):
    if not livesys_options:
        return

    with open(f"{tree}/etc/sysconfig/livesys", "w", encoding="utf8") as livesys_file:
        livesys_file.write("livesys_session=\"{livesys_options['session']}\"\n")

        os.fchown(livesys_file.fileno(), 0, 0)
        os.fchmod(livesys_file.fileno(), 0o644)


def configure_desktop(tree, desktop_options):
    if not desktop_options:
        return

    with open(f"{tree}/etc/sysconfig/desktop", "w", encoding="utf8") as desktop_file:
        if "preferred" in desktop_options:
            desktop_file.write("PREFERRED={desktop_options['preferred']}\n")

        if "displaymanager" in desktop_options:
            desktop_file.write("DISPLAYMANAGER={desktop_options['displaymanager']}\n")

        os.fchown(desktop_file.fileno(), 0, 0)
        os.fchmod(desktop_file.fileno(), 0o644)


def configure_kernel(tree, kernel_options):
    if not kernel_options:
        return

    with open(f"{tree}/etc/sysconfig/kernel", 'w', encoding="utf8") as kernel_file:
        for option, value in kernel_options.items():
            if option == "update_default":
                kernel_file.write(f"UPDATEDEFAULT={bool_to_string(value)}\n")
            elif option == "default_kernel":
                kernel_file.write(f"DEFAULTKERNEL={value}\n")
            else:
                # schema does not currently allow any additional properties but it may at some point
                raise ValueError(f"Error: unknown property {option} specified for sysconfig kernel config.")


def configure_network(tree, network_options):
    if not network_options:
        return

    with open(f"{tree}/etc/sysconfig/network", 'w', encoding="utf8") as network_file:
        for option, value in network_options.items():
            if option == "networking":
                network_file.write(f"NETWORKING={bool_to_string(value)}\n")
            elif option == "no_zero_conf":
                network_file.write(f"NOZEROCONF={bool_to_string(value)}\n")
            else:
                # schema does not currently allow any additional properties but it may at some point
                raise ValueError(f"Error: unknown property {option} specified for sysconfig network config.")


def configure_network_scripts(tree, network_scripts_options):
    if not network_scripts_options:
        return

    # if the network-scripts dir does not yet exist create it
    os.makedirs(f"{tree}/etc/sysconfig/network-scripts", exist_ok=True)

    network_scripts_ifcfg_options = network_scripts_options.get("ifcfg", {})

    configure_network_scripts_ifcfg(tree, network_scripts_ifcfg_options)


def configure_network_scripts_ifcfg(tree, network_scripts_ifcfg_options):
    for ifname, ifconfig in network_scripts_ifcfg_options.items():
        lines = []
        for option, value in ifconfig.items():
            if option == "device":
                lines.append(f'DEVICE="{value}"\n')
            elif option == "bootproto":
                lines.append(f'BOOTPROTO="{value}"\n')
            elif option == "onboot":
                lines.append(f'ONBOOT="{bool_to_string(value)}"\n')
            elif option == "type":
                lines.append(f'TYPE="{value}"\n')
            elif option == "userctl":
                lines.append(f'USERCTL="{bool_to_string(value)}"\n')
            elif option == "peerdns":
                lines.append(f'PEERDNS="{bool_to_string(value)}"\n')
            elif option == "ipv6init":
                lines.append(f'IPV6INIT="{bool_to_string(value)}"\n')
            else:
                # schema does not currently allow any additional properties but it may at some point
                raise ValueError(f"Error: unknown property {option} specified for sysconfig network-scripts/ifcfg "
                                 "config.")

        if lines:
            with open(f"{tree}/etc/sysconfig/network-scripts/ifcfg-{ifname}", 'w', encoding="utf8") as ifcfg_file:
                ifcfg_file.writelines(lines)


def main(tree, options):
    # if the sysconfig dir does not yet exist create it
    os.makedirs(f"{tree}/etc/sysconfig/", exist_ok=True)

    kernel_options = options.get("kernel", {})
    network_options = options.get("network", {})
    network_scripts_options = options.get("network-scripts", {})
    livesys_options = options.get("livesys", {})
    desktop_options = options.get("desktop", {})

    configure_kernel(tree, kernel_options)
    configure_network(tree, network_options)
    configure_network_scripts(tree, network_scripts_options)
    configure_livesys(tree, livesys_options)
    configure_desktop(tree, desktop_options)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
