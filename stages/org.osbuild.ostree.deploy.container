#!/usr/bin/python3
import os
import sys

import osbuild.api
from osbuild.util import containers, ostree
from osbuild.util.mnt import MountGuard


def make_fs_identifier(desc):
    for key in ["uuid", "label"]:
        val = desc.get(key)
        if val:
            return f"{key.upper()}={val}"
    raise ValueError("unknown rootfs type")


def ostree_container_deploy(tree, inputs, osname, target_imgref, kopts):
    images = containers.parse_containers_input(inputs)
    for image in images.values():
        with containers.container_source(image) as (_, image_source):
            extra_args = []
            imgref = f"ostree-unverified-image:{image_source}"

            # This stage crashes when using `containers-storage` if `/var/tmp` doesn't exist,
            # since the directory is required by `skopeo` for big files. See:
            # https://github.com/containers/image/blob/4ad2f46269f1a1f6ad4067e418b820a1b3453615/storage/storage_src.go#L163
            # https://github.com/containers/image/blob/2cb3c9d3c29dc1c23b45f93abeed9b3f57f6a8b4/internal/tmpdir/tmpdir.go#L18
            os.makedirs("/var/tmp", mode=0o1777, exist_ok=True)

            extra_args.append(f'--imgref={imgref}')
            extra_args.append(f'--stateroot={osname}')

            # consider implicit signature verification type checks, but
            # can't think of a "clean" way to do it yet other than
            # parsing the target-imgref and separating by the ':' character
            extra_args.append(f'--target-imgref={target_imgref}')

            kargs = [f'--karg={v}' for v in kopts]

            ostree.cli("container", "image", "deploy",
                       *extra_args, sysroot=tree, *kargs)


def main(tree, inputs, options):
    osname = options["osname"]
    rootfs = options.get("rootfs")
    mounts = options.get("mounts", [])
    kopts = options.get("kernel_opts", [])
    target_imgref = options.get("target_imgref")

    # schema should catch the case in which there are more
    # than one input but this adds a second layer of security
    if len(inputs) > 1:
        raise ValueError("Only one input accepted")

    if rootfs:
        rootfs_id = make_fs_identifier(rootfs)
        kopts += [f"root={rootfs_id}"]

    with MountGuard() as mounter:
        for mount in mounts:
            path = mount.lstrip("/")
            path = os.path.join(tree, path)
            mounter.mount(path, path)

        ostree_container_deploy(tree, inputs, osname, target_imgref, kopts)


if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["inputs"],
             stage_args["options"])
    sys.exit(r)
