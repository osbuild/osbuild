#!/usr/bin/python3
"""
Execute oscap remediation

The OpenSCAP scanner can be run on the image tree and the remediation can be carried
out during build time. The stage takes the OpenSCAP config as input and then runs the
the utility in chroot to scan and remediate [1] the tree during image at build time.

The stage generates an html report and xml results file both saved to the `/openscap_data`
directory.

[1] https://github.com/OpenSCAP/openscap/blob/maint-1.3/docs/manual/manual.adoc#remediating-system
"""


import os
import subprocess
import sys

import osbuild.api


SCHEMA = """
"additionalProperties": false,
"required": ["config"],
"properties": {
  "data_dir": {
    "type": "string",
    "description": "Path to directory where OpenSCAP reports and results should be saved"
  },
  "config": {
    "additionalProperties": false,
    "required": ["profile_id", "datastream"],
    "type": "object",
    "description": "OpenSCAP configuration variables",
    "properties": {
      "profile_id": {
        "type": "string",
        "description": "The scap profile id"
      },
      "datastream": {
        "type": "string",
        "description": "The path to the datastream file"
      },
      "datastream_id": {
        "type": "string",
        "description": "The datastream id"
      },
      "xccdf_id": {
        "type": "string",
        "description": "The xccdf id"
      },
      "benchmark_id": {
        "type": "string",
        "description": "The benchmark id"
      },
      "tailoring": {
        "type": "string",
        "description": "The path to the custom tailoring file"
      },
      "tailoring_id": {
        "type": "string",
        "description": "The tailoring id"
      },
      "xml_results": {
        "type": "string",
        "description": "Filename for saving the xml result file",
        "default": "eval_remediate_results.xml"
      },
      "arf_results": {
        "type": "string",
        "description": "Filename for saving the arf result file"
      },
      "html_report": {
        "type": "string",
        "description": "Filename for saving the html report",
        "default": "eval_remediate_report.html"
      },
      "verbose_log": {
        "type": "string",
        "description": "Filename for verbose error messages"
      },
      "verbose_level": {
        "type": "string",
        "enum": ["DEVEL", "INFO", "ERROR", "WARNING"],
        "description": "The verbosity level for the log messages"
      }
    }
  }
}
"""

XML_RESULTS = "eval_remediate_results.xml"
HTML_REPORT = "eval_remediate_report.html"


def main(tree, options):
    # required vars
    config = options["config"]
    profile = config["profile_id"]
    datastream = config["datastream"]
    # optional vars
    xccdf_id = config.get("xccdf_id")
    data_dir = options.get("data_dir")
    ds_id = config.get("datastream_id")
    tailoring = config.get("tailoring")
    xml_results = config.get("xml_results", XML_RESULTS)
    html_report = config.get("html_report", HTML_REPORT)

    # run openscap in chroot on the image tree
    cmd = [
        "/usr/sbin/chroot", tree,
        "/usr/bin/oscap", "xccdf", "eval",
        "--remediate", "--profile", profile
    ]

    if data_dir is not None:
        os.makedirs(f"{tree}/{data_dir.lstrip('/')}", exist_ok=True)
        # run with command in chroot so full path ok
        cmd.extend(["--results", f"{data_dir}/{xml_results}"])
        cmd.extend(["--report", f"{data_dir}/{html_report}"])

    if ds_id is not None:
        cmd.extend(["--datastream-id", ds_id])

    if xccdf_id is not None:
        cmd.extend(["--xccdf-id", xccdf_id])

    if tailoring is not None:
        cmd.extend(["--tailoring-file", tailoring])

    cmd.append(datastream)

    res = subprocess.run(cmd, encoding="utf-8", stdout=sys.stderr, check=False)

    # oscap return values are:
    # 0 → success
    # 2 → -- no error, but some checks/remediation failed
    if res.returncode not in (0, 2):
        raise RuntimeError("oscap content evaluation and remediation failed")

    return 0


if __name__ == "__main__":
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
