#!/usr/bin/python3
"""
Assembles the tree into a tar archive named `filename`.

Uses the buildhost's `tar` command, like: `tar -cf $FILENAME -C $TREE`

The compression of the tar archive if determined by the suffix, i.e.
the `--auto-compress` option is used. See tar(1) for details.

By default POSIX ACLs, SELinux contexts and extended attributes are included,
in order to preserve the tree as closely as possible. It is possible to opt
out of any of those by supplying the corresponding option.

Buildhost commands used: `tar` and any needed compression program.
"""

import os
import subprocess
import sys

import osbuild.api

SCHEMA_2 = """
"options": {
  "additionalProperties": false,
  "anyOf": [
    {
      "required": ["root-node"],
      "not": {
        "required": ["paths"]
      }
    },
    {
      "required": ["paths"],
      "not": {
        "required": ["root-node"]
      }
    },
    {
      "not": {
        "required": ["paths", "root-node"]
      }
    }
  ],
  "required": ["filename"],
  "properties": {
    "filename": {
      "description": "Filename for tar archive",
      "type": "string"
    },
    "format": {
      "description": "Archive format to use",
      "type": "string",
      "enum": ["gnu", "oldgnu", "posix", "ustar", "v7"],
      "default": "gnu"
    },
    "acls": {
      "description": "Enable support for POSIX ACLs",
       "type": "boolean",
       "default": true
    },
    "selinux": {
      "description": "Enable support for SELinux contexts",
      "type": "boolean",
      "default": true
    },
    "xattrs": {
      "description": "Enable support for extended attributes",
      "type": "boolean",
      "default": true
    },
    "root-node": {
      "description": "How to handle the root node: include or omit, mutually exclusive with paths",
      "enum": ["include", "omit"]
    },
    "paths": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "If specified, the archive will only contain the specified paths, in the specified order"
      }
    },
    "sparse": {
      "description": "Make archive files sparse",
      "type": "boolean",
      "default": false
    }
  }
},
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "required": ["tree"],
  "properties": {
    "tree": {
      "type": "object",
      "additionalProperties": true
    }
  }
}
"""


def main(inputs, output_dir, options):
    tree = inputs["tree"]["path"]
    filename = options["filename"].lstrip("/")
    tarfmt = options.get("format", "gnu")
    root_node = options.get("root-node", "include")
    paths = options.get("paths", [])

    extra_args = []
    # Set environment variables for the tar operation.
    tar_env = {
        # Speed up xz by allowing it to use all CPU cores for compression.
        "XZ_OPT": "--threads 0"
    }

    # SELinux context, ACLs, extended attributes, and sparse
    if options.get("acls", True):
        extra_args += ["--acls"]

    if options.get("selinux", True):
        extra_args += ["--selinux"]

    if options.get("xattrs", True):
        extra_args += ["--xattrs", "--xattrs-include", "*"]

    if options.get("sparse", False):
        extra_args += ["--sparse"]

    # Set up the tar command.
    tar_cmd = [
        "tar",
        "--auto-compress",
        f"--format={tarfmt}",
        *extra_args,
        "-cf", os.path.join(output_dir, filename),
        "-C", tree,
    ]

    if len(paths) == 0:
        # Should we include the root inode or not
        # This will change the way files are listed:
        # `./file` (include) vs `file` (omit)
        if root_node == "include":
            tar_cmd += ["."]
        else:
            tar_cmd += os.listdir(tree)
    else:
        tar_cmd += paths

    # Make a tarball of the tree.
    subprocess.run(
        tar_cmd,
        stdout=subprocess.DEVNULL,
        check=True,
        env=tar_env
    )

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"], args["options"])
    sys.exit(r)
