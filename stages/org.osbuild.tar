#!/usr/bin/python3
import os
import subprocess
import sys

import osbuild.api


def main(inputs, output_dir, options):
    tree = inputs["tree"]["path"]
    filename = options["filename"].lstrip("/")
    tarfmt = options.get("format", "gnu")
    root_node = options.get("root-node", "include")
    paths = options.get("paths", [])

    extra_args = []
    # Set environment variables for the tar operation.
    tar_env = {
        # Speed up xz by allowing it to use all CPU cores for compression.
        "XZ_OPT": "--threads 0"
    }

    # SELinux context, ACLs, extended attributes, and sparse
    if options.get("acls", True):
        extra_args += ["--acls"]

    if options.get("selinux", True):
        extra_args += ["--selinux"]

    if options.get("xattrs", True):
        extra_args += ["--xattrs", "--xattrs-include", "*"]

    if options.get("sparse", False):
        extra_args += ["--sparse"]

    transform = options.get("transform")
    if transform:
        extra_args += ["--transform", transform]

    compression = options.get("compression", "auto")

    if compression == "auto":
        extra_args += ["--auto-compress"]
    else:
        # Note that the enums in the schema have been chosen exactly
        # as the long forms for the compression flag(s) that GNU tar
        # accepts
        extra_args += [f"--{compression}"]

    # Set up the tar command.
    tar_cmd = [
        "tar",
        f"--format={tarfmt}",
        *extra_args,
        "-cf", os.path.join(output_dir, filename),
        "-C", tree,
    ]

    if len(paths) == 0:
        # Should we include the root inode or not
        # This will change the way files are listed:
        # `./file` (include) vs `file` (omit)
        if root_node == "include":
            tar_cmd += ["."]
        else:
            tar_cmd += os.listdir(tree)
    else:
        tar_cmd += paths

    # Make a tarball of the tree.
    subprocess.run(
        tar_cmd,
        stdout=subprocess.DEVNULL,
        check=True,
        env=tar_env
    )

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"], args["options"])
    sys.exit(r)
