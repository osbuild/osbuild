#!/usr/bin/python3
"""
Copy a container image. The destination can be either a container store,
or a directory compliant with 'Open Container Image Layout Specification'.
This supports both oci archives and docker archives, and uses the containers
input (reading from a skopeo source or a file in a pipeline).

Buildhost commands used: `skopeo`.
"""

import os
import subprocess
import sys

import osbuild.api
from osbuild.util import containers

SCHEMA_2 = r"""
"definitions": {
  "destination-containers-storage": {
    "type": "object",
    "additionalProperties": false,
    "required": ["type"],
    "properties": {
      "type": {
        "enum": ["containers-storage"]
      },
      "storage-path": {
        "description": "Container storage location (default /var/lib/containers/storage).",
        "type": "string",
        "default": "/var/lib/containers/storage"
      },
      "storage-driver": {
        "description": "The container storage driver to use (default overlay).",
        "type": "string",
        "default": "overlay"
      }
    }
  },
  "destination-oci": {
    "type": "object",
    "additionalProperties": false,
    "required": ["type", "path"],
    "properties": {
      "type": {
        "enum": ["oci"]
      },
      "path": {
        "description": "Location of a directory compliant with 'Open Container Image Layout Specification'",
        "type": "string"
      }
    }
  }
},
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "required": ["images"],
  "properties": {
    "images": {
      "type": "object",
      "additionalProperties": true
    },
    "manifest-lists": {
      "type": "object",
      "description": "Optional manifest lists to merge into images. The metadata must specify an image ID to merge to.",
      "additionalProperties": true
    }
  }
},
"options": {
  "additionalProperties": false,
  "required": ["destination"],
  "properties": {
    "destination": {
      "oneOf": [
        {"$ref": "#/definitions/destination-containers-storage"},
        {"$ref": "#/definitions/destination-oci"}
      ]
    }
  }
}
"""


def main(inputs, output, options):
    images = containers.parse_containers_input(inputs)

    destination = options["destination"]
    dest_type = destination["type"]

    for image in images.values():
        with containers.container_source(image) as (image_name, image_source):
            if dest_type == "containers-storage":
                storage_root = destination.get("storage-path", "/var/lib/containers/storage")
                storage_driver = destination.get("storage-driver", "overlay")
                dest = f"containers-storage:[{storage_driver}@{output}{storage_root}+/run/containers/storage]{image_name}"
            elif dest_type == "oci":
                path = destination["path"]
                dest = f"oci:{output}{path}"
            else:
                raise ValueError(f"Unknown destination type '{dest_type}'")

            subprocess.run(["skopeo", "copy", image_source, dest], check=True)

    if dest_type == "containers-storage" and storage_driver == "overlay":
        # Each time the overlay backend runs on an xfs fs it creates this file:
        backing_fs_block_dev = os.path.join(output, storage_root.lstrip("/"), "overlay/backingFsBlockDev")
        # It is not needed in the image as skopeo recreates it each
        # boot, and since it is a block device its existance means we
        # can't store the resulting tree in ostree.
        # Lets just get rid of it.
        if os.path.exists(backing_fs_block_dev):
            os.unlink(backing_fs_block_dev)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"], args["options"])
    sys.exit(r)
