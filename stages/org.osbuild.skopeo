#!/usr/bin/python3
import os
import pathlib
import subprocess
import sys

import osbuild.api
from osbuild.util import containers


def main(inputs, output, options):
    images = containers.parse_containers_input(inputs)

    destination = options["destination"]
    dest_type = destination["type"]

    for image in images.values():
        with containers.container_source(image) as (image_name, image_source):
            if dest_type == "containers-storage":
                storage_root = destination.get("storage-path", "/var/lib/containers/storage")
                storage_driver = destination.get("storage-driver", "overlay")
                dest = f"containers-storage:[{storage_driver}@{output}{storage_root}+/run/containers/storage]{image_name}"
            elif dest_type in ("oci", "oci-archive", "dir"):
                path = destination["path"]
                dest = f"{dest_type}:{output}{path}"
                pathlib.Path(f"{output}{path}").parent.mkdir(parents=True, exist_ok=True)
            else:
                raise ValueError(f"Unknown destination type '{dest_type}'")

            subprocess.run(["skopeo", "copy", image_source, dest], check=True)

    if dest_type == "containers-storage" and storage_driver == "overlay":
        # Each time the overlay backend runs on an xfs fs it creates this file:
        backing_fs_block_dev = os.path.join(output, storage_root.lstrip("/"), "overlay/backingFsBlockDev")
        # It is not needed in the image as skopeo recreates it each
        # boot, and since it is a block device its existance means we
        # can't store the resulting tree in ostree.
        # Lets just get rid of it.
        if os.path.exists(backing_fs_block_dev):
            os.unlink(backing_fs_block_dev)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"], args["options"])
    sys.exit(r)
