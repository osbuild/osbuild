#!/usr/bin/python3
import re
import sys

import osbuild.api


DELETE_TIME_SOURCE_LINE_REGEX = re.compile(r"(server|pool|peer) ")
DELETE_LEAPSECTZ_LINE_REGEX = re.compile(r"leapsectz ")


# In-place modify the passed 'chrony_conf_lines' by removing lines which
# match the provided regular expression.
def delete_config_lines(chrony_conf_lines, compiled_re):
    chrony_conf_lines[:] = [line for line in chrony_conf_lines if not compiled_re.match(line)]


# Modifies the passed 'chrony_conf_lines' in-place.
def handle_timeservers(chrony_conf_lines, timeservers):
    # prepend new server lines
    new_lines = [f"server {server} iburst" for server in timeservers]
    chrony_conf_lines[:] = new_lines + chrony_conf_lines


# Modifies the passed 'chrony_conf_lines' in-place.
def handle_servers(chrony_conf_lines, servers):
    new_lines = []

    for server in servers:
        new_line = f"server {server['hostname']}"
        if server.get("prefer", False):
            new_line += " prefer"
        if server.get("iburst", True):
            new_line += " iburst"
        # Default to 'None', because the value can be zero.
        minpoll_value = server.get("minpoll", None)
        if minpoll_value is not None:
            new_line += f" minpoll {minpoll_value}"
        # Default to 'None', because the value can be zero.
        maxpoll_value = server.get("maxpoll", None)
        if maxpoll_value is not None:
            new_line += f" maxpoll {maxpoll_value}"
        new_lines.append(new_line)

    chrony_conf_lines[:] = new_lines + chrony_conf_lines


# Modifies the passed 'chrony_conf_lines' in-place.
def handle_leapsectz(chrony_conf_lines, timezone):
    # Delete the directive as the first step, to prevent the situation of
    # having it defined multiple times in the configuration.
    delete_config_lines(chrony_conf_lines, DELETE_LEAPSECTZ_LINE_REGEX)

    if timezone:
        chrony_conf_lines[:] = [f"leapsectz {timezone}"] + chrony_conf_lines


def main(tree, options):
    timeservers = options.get("timeservers", [])
    servers = options.get("servers", [])
    # Empty string value will remove the option from the configuration,
    # therefore default to 'None' to distinguish these two cases.
    leapsectz = options.get("leapsectz", None)

    with open(f"{tree}/etc/chrony.conf", encoding="utf8") as f:
        chrony_conf = f.read()

    # Split to lines and remove ones starting with server, pool or peer.
    # At least one option configuring NTP servers is required, therefore
    # we do it before applying the configuration.
    lines = chrony_conf.split('\n')
    delete_config_lines(lines, DELETE_TIME_SOURCE_LINE_REGEX)

    if timeservers:
        handle_timeservers(lines, timeservers)
    if servers:
        handle_servers(lines, servers)
    if leapsectz is not None:
        handle_leapsectz(lines, leapsectz)

    new_chrony_conf = "\n".join(lines)

    with open(f"{tree}/etc/chrony.conf", "w", encoding="utf8") as f:
        f.write(new_chrony_conf)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
