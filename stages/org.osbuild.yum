#!/usr/bin/python3

import json
import subprocess
import sys
import tempfile

def write_repofile(f, repoid, repo, keydir):
    f.write(f"[{repoid}]\n")

    def write_option(key, value):
        f.write(f"{key}={value}\n")

    # silence dnf warning about missing name
    write_option("name", repoid)

    for key in ("metalink", "mirrorlist", "baseurl"):
        value = repo.get(key)
        if value:
            write_option(key, value)

    if "gpgkey" in repo:
        keyfile = f"{keydir}/{repoid}.asc"
        with open(keyfile, "w") as key:
            key.write(repo["gpgkey"])
        write_option("gpgcheck", 1)
        write_option("gpgkey", f"file://{keyfile}")


def main(tree, options):
    repos = options["repos"]
    packages = options["packages"]
    releasever = options["releasever"]
    operation = options.get("operation", "install")
    verbosity = options.get("verbosity", "info")

    script = f"""
        set -e
        mkdir -p {tree}/dev {tree}/sys {tree}/proc
        mount -t devtmpfs none {tree}/dev
        mount -t sysfs none {tree}/sys
        mount -t proc none {tree}/proc
    """
    try:
        subprocess.run(["/bin/sh", "-c", script], check=True)
    except subprocess.CalledProcessError as err:
        print(f"setting up API VFS in target tree failed: {err.returncode}")
        return err.returncode

    with tempfile.TemporaryDirectory(prefix="org.osbuild.yum.") as confdir:
        yumconf = f"{confdir}/yum.conf"
        with open(yumconf, "w") as conf:
            for num, repo in enumerate(repos):
                write_repofile(conf, f"repo{num}", repo, confdir)

        cmd = [
            "yum", "--assumeyes",
            f"--installroot={tree}",
            "--setopt=\"reposdir=\"",
            f"--releasever={releasever}",
            f"--rpmverbosity={verbosity}",
            f"--config={yumconf}",
            operation
        ] + packages

        print(" ".join(cmd), flush=True)
        return subprocess.run(cmd, check=False).returncode


if __name__ == '__main__':
    args = json.load(sys.stdin)
    r = main(args["tree"], args["options"])
    sys.exit(r)
