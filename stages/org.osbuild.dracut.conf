#!/usr/bin/python3
import sys

import osbuild.api


def bool_to_string(value):
    return "yes" if value else "no"


# Writes to a given file option with the following format:
# persistent_policy="<policy>"
def string_option_writer(f, option, value):
    f.write(f'{option}="{value}"\n')


# Writes to a given file option with the following format:
# add_dracutmodules+=" <dracut modules> "
def list_option_writer(f, option, value):
    value_str = " ".join(value)
    f.write(f'{option}+=" {value_str} "\n')


# Writes to a given file option with the following format:
# reproducible="{yes|no}"
def bool_option_writer(f, option, value):
    f.write(f'{option}="{bool_to_string(value)}"\n')


def main(tree, options):
    config = options["config"]
    filename = options["filename"]

    config_files_dir = f"{tree}/usr/lib/dracut/dracut.conf.d"

    SUPPORTED_OPTIONS = {
        # simple string options
        "compress": string_option_writer,
        # list options
        "add_dracutmodules": list_option_writer,
        "dracutmodules": list_option_writer,
        "omit_dracutmodules": list_option_writer,
        "drivers": list_option_writer,
        "add_drivers": list_option_writer,
        "omit_drivers": list_option_writer,
        "force_drivers": list_option_writer,
        "filesystems": list_option_writer,
        "install_items": list_option_writer,
        # bool options
        "early_microcode": bool_option_writer,
        "reproducible": bool_option_writer
    }

    with open(f"{config_files_dir}/{filename}", "w", encoding="utf8") as f:
        for option, value in config.items():
            try:
                writter_func = SUPPORTED_OPTIONS[option]
                writter_func(f, option, value)
            except KeyError as e:
                raise ValueError(f"unsupported configuration option '{option}'") from e


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
