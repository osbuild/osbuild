#!/usr/bin/python3
"""
Deploy a container.

Buildhost commands used: podman skopeo
"""
import contextlib
import os
import random
import string
import subprocess
import sys

import osbuild.api
from osbuild.util import containers

SCHEMA_2 = r"""
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "required": ["images"],
  "properties": {
    "images": {
      "type": "object",
      "additionalProperties": true
    }
  }
},
"options": {
  "additionalProperties": false
}
"""


@contextlib.contextmanager
def mount_container(image_tag):
    try:
        result = subprocess.run(
            ["podman", "image", "mount", image_tag],
            capture_output=True,
            encoding="utf-8",
            check=True,
        )
        yield result.stdout.strip()

    finally:
        subprocess.run(
            ["podman", "image", "umount", image_tag],
            check=True,
        )


def main(inputs, output):
    images = containers.parse_containers_input(inputs)
    assert len(images) == 1
    image = list(images.values())[0]

    # skopeo needs /var/tmp but the bwrap env is minimal and may not have it
    os.makedirs("/var/tmp", mode=0o1777, exist_ok=True)
    # We cannot use a tmpdir as storage here because of
    # https://github.com/containers/storage/issues/1779 so instead
    # just pick a random suffix. This runs inside bwrap which gives a
    # tmp /var so it does not really matter much.
    image_tag = "tmp-container-deploy-" + "".join(random.choices(string.digits, k=14))
    with contextlib.ExitStack() as cm:
        cm.callback(subprocess.run, ["podman", "rmi", image_tag], check=True)
        with containers.container_source(image) as (_, source):
            subprocess.run(
                ["skopeo", "copy", source,
                 f"containers-storage:{image_tag}"],
                check=True,
            )
        with mount_container(image_tag) as img:
            subprocess.run(["cp", "-a", f"{img}/.", f"{output}/"], check=True)


if __name__ == "__main__":
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"])
    sys.exit(r)
