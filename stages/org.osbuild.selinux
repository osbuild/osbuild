#!/usr/bin/python3
import os
import pathlib
import sys

import osbuild.api
from osbuild.util import selinux


def main(tree, options):
    file_contexts = os.path.join(f"{tree}", options["file_contexts"])
    exclude_paths = options.get("exclude_paths")
    if exclude_paths:
        exclude_paths = [os.path.join(tree, p.lstrip("/")) for p in exclude_paths]
    selinux.setfiles(file_contexts, os.fspath(tree), "", exclude_paths=exclude_paths)

    labels = options.get("labels", {})
    for path, label in labels.items():
        fullpath = os.path.join(tree, path.lstrip("/"))
        selinux.setfilecon(fullpath, label)

    if options.get("force_autorelabel", False):
        stamp = pathlib.Path(tree, ".autorelabel")
        # Creating just empty /.autorelabel resets only the type of files.
        # To ensure that the full context is reset, we write "-F" into the file.
        # This mimics the behavior of `fixfiles -F boot`. The "-F" option is
        # then passed to `selinux-autorelabel` script [0].
        # Note that this is missing from the selinux(8) and selinux_config(5) man-pages
        # [0] https://src.fedoraproject.org/rpms/policycoreutils/blob/rawhide/f/selinux-autorelabel#_54
        stamp.write_text("-F", encoding="utf-8")


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
