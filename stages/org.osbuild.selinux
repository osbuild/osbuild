#!/usr/bin/python3
import os
import pathlib
import sys

import osbuild.api
from osbuild.util import parsing, selinux


def main(args):
    # Get the path where the tree is
    tree = args["tree"]
    options = args["options"]
    file_contexts = options.get("file_contexts")
    exclude_paths = options.get("exclude_paths")
    target = options.get("target", "tree:///")
    root, target = parsing.parse_location_into_parts(target, args)

    if file_contexts:
        if "://" not in file_contexts:
            file_contexts = os.path.normpath(f"{tree}/{file_contexts}")
        else:
            file_contexts = parsing.parse_location(file_contexts, args)
        if exclude_paths:
            exclude_paths = [os.path.normpath(f"{root}/{target}/{p}") for p in exclude_paths]
        selinux.setfiles(file_contexts, os.path.normpath(root), target, exclude_paths=exclude_paths)

    labels = options.get("labels", {})
    for path, label in labels.items():
        fullpath = parsing.parse_location(path, args)
        selinux.setfilecon(fullpath, label)

    if options.get("force_autorelabel", False):
        stamp = pathlib.Path(root, ".autorelabel")
        # Creating just empty /.autorelabel resets only the type of files.
        # To ensure that the full context is reset, we write "-F" into the file.
        # This mimics the behavior of `fixfiles -F boot`. The "-F" option is
        # then passed to `selinux-autorelabel` script [0].
        # Note that this is missing from the selinux(8) and selinux_config(5) man-pages
        # [0] https://src.fedoraproject.org/rpms/policycoreutils/blob/rawhide/f/selinux-autorelabel#_54
        stamp.write_text("-F", encoding="utf-8")


if __name__ == '__main__':
    r = main(osbuild.api.arguments())
    sys.exit(r)
