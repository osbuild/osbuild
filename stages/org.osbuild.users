#!/usr/bin/python3
import os
import subprocess
import sys

import osbuild.api


def getpwnam(root, name):
    """Similar to pwd.getpwnam, but takes a @root parameter"""
    with open(f"{root}/etc/passwd", encoding="utf8") as f:
        for line in f:
            passwd = line.split(":")
            if passwd[0] == name:
                return passwd
        return None


def useradd(
        root,
        name,
        uid=None,
        gid=None,
        groups=None,
        description=None,
        home=None,
        shell=None,
        password=None,
        expiredate=None):
    arguments = []
    if uid is not None:
        arguments += ["--uid", str(uid), "-o"]
    if gid is not None:
        arguments += ["--gid", str(gid)]
    if groups:
        arguments += ["--groups", ",".join(groups)]
    if description is not None:
        arguments += ["--comment", description]
    if home:
        arguments += ["--home-dir", home]
        arguments += ["--create-home"]
    elif home == "":
        arguments += ["--no-create-home"]
    if shell:
        arguments += ["--shell", shell]
    if password is not None:
        arguments += ["--password", password]
    if expiredate is not None:
        arguments += ["--expiredate", str(expiredate)]

    subprocess.run(["chroot", root, "useradd", *arguments, name], check=True)


def usermod(root, name, gid=None, groups=None, description=None, home=None, shell=None, password=None, expiredate=None):
    arguments = []
    if gid is not None:
        arguments += ["--gid", gid]
    if groups:
        arguments += ["--groups", ",".join(groups)]
    if description is not None:
        arguments += ["--comment", description]
    if home:
        arguments += ["--home", home]
    if shell:
        arguments += ["--shell", shell]
    if password is not None:
        arguments += ["--password", password]
    if expiredate is not None:
        arguments += ["--expiredate", str(expiredate)]

    if arguments:
        subprocess.run(["chroot", root, "usermod", *arguments, name], check=True)


def add_ssh_keys(root, user, keys):
    _, _, uid, gid, _, home, _ = getpwnam(root, user)
    ssh_dir = f"{root}/{home}/.ssh"
    authorized_keys = f"{ssh_dir}/authorized_keys"

    if not os.path.exists(ssh_dir):
        os.mkdir(ssh_dir, 0o700)
        os.chown(ssh_dir, int(uid), int(gid))

    with open(authorized_keys, "a", encoding="utf8") as f:
        f.write("\n".join(keys) + "\n")

    os.chown(authorized_keys, int(uid), int(gid))
    os.chmod(authorized_keys, 0o600)


def ensure_homedir(root, name, home):
    if not home:
        return

    if os.path.exists(os.path.join(root, home.lstrip("/"))):
        return

    subprocess.run(["chroot", root, "mkhomedir_helper", name], check=True)


def main(tree, options):
    users = options["users"]

    for name, user_options in users.items():
        uid = user_options.get("uid")
        gid = user_options.get("gid")
        groups = user_options.get("groups")
        description = user_options.get("description")
        home = user_options.get("home")
        shell = user_options.get("shell")
        password = user_options.get("password")
        expiredate = user_options.get("expiredate")
        force_password_reset = user_options.get("force_password_reset", False)

        passwd = getpwnam(tree, name)
        if passwd is not None:
            # `pw_uid` is the third field of `struct passwd` see `getpwnam(3)`
            if uid is not None and passwd[2] != str(uid):
                print(f"Error: can't set uid of existing user '{name}'")
                return 1
            usermod(tree, name, gid, groups, description, home, shell, password, expiredate)

            # ensure the home directory exists, see module doc string for details
            _, _, _, _, _, home, _ = getpwnam(tree, name)
            ensure_homedir(tree, name, home)
        else:
            useradd(tree, name, uid, gid, groups, description, home, shell, password, expiredate)

        if force_password_reset:
            subprocess.run(["chroot", tree, "passwd", "--expire", name], check=True)

        # following maintains backwards compatibility for handling a single ssh key
        key = user_options.get("key")   # Public SSH key
        keys = user_options.get("keys", [])  # Additional public SSH keys
        if key:
            keys.append(key)
        if keys:
            add_ssh_keys(tree, name, keys)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
