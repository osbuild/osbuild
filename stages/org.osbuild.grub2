#!/usr/bin/python3

import json
import os
import shutil
import sys

STAGE_DESC = "Configure GRUB2 bootloader and set boot options"
STAGE_INFO = """
Configure the system to use GRUB2 as the bootloader, and set boot options.

Sets the GRUB2 boot/root filesystem to `root_fs_uuid` and sets kernel boot
arguments to "root=UUID={root_fs_uuid} {kernel_opts}".

Configures GRUB2 to boot via the Boot Loader Specification
(https://systemd.io/BOOT_LOADER_SPECIFICATION), which is the default
behavior in Fedora 30 and later.

This stage will overwrite `/etc/default/grub`, `/boot/grub2/grubenv`, and
`/boot/grub2/grub.cfg`. (Leading directories will be created if not present.)

If Legacy boot support is requested (the default, or explicitly via `legacy`)
this stage will also overwrite `/boot/grub2/grub.cfg` and will copy the
GRUB2 files from the buildhost into the target tree:
* `/usr/share/grub/unicode.pf2`       -> `/boot/grub2/fonts/`
* `/usr/lib/grub/i386-pc/*.{mod,lst}` -> `/boot/grub2/i386-pc/`
  * NOTE: skips `fdt.lst`, which is an empty file

NB: with legacy support enabled, this stage will fail if the buildhost
doesn't have `/usr/lib/grub/i386-pc/` and `/usr/share/grub/unicode.pf2`.

If UEFI support is enabled via `uefi: {"vendor": "<vendor>"}` this stage will
also write the `grub.cfg` to `boot/efi/EFI/<vendor>/grub.cfg`.

Both UEFI and Legacy can be specified at the same time.
"""
STAGE_OPTS = """
"required": ["root_fs_uuid"],
"properties": {
  "root_fs_uuid": {
    "description": "UUID of the root filesystem image",
    "type": "string",
    "oneOf": [
      { "pattern": "^[0-9A-Za-z]{8}(-[0-9A-Za-z]{4}){3}-[0-9A-Za-z]{12}$",
        "examples": ["9c6ae55b-cf88-45b8-84e8-64990759f39d"] },
      { "pattern": "^[0-9A-Za-z]{4}-[0-9A-Za-z]{4}$",
        "examples": ["6699-AFB5"] }
    ]
  },
  "kernel_opts": {
    "description": "Additional kernel boot options",
    "type": "string",
    "default": ""
  },
  "legacy": {
    "description": "Include legacy boot support",
    "type": "boolean",
    "default": true
  },
  "uefi": {
    "description": "Include UEFI boot support",
    "type": "object",
    "required": ["vendor"],
      "properties": {
        "vendor": {
          "type": "string",
           "description": "The vendor of the UEFI binaries (this is us)",
           "examples": ["fedora"],
           "pattern": "^(.+)$"
         }
      }
  }
}
"""


def copy_modules(tree):
    """Copy all modules from the build image to /boot"""
    os.makedirs(f"{tree}/boot/grub2/i386-pc", exist_ok=True)
    for dirent in os.scandir("/usr/lib/grub/i386-pc"):
        (_, ext) = os.path.splitext(dirent.name)
        if ext not in ('.mod', '.lst'):
            continue
        if dirent.name == "fdt.lst":
            continue
        shutil.copy2(f"/usr/lib/grub/i386-pc/{dirent.name}", f"{tree}/boot/grub2/i386-pc/")


def copy_font(tree):
    """Copy a unicode font into /boot"""
    os.makedirs(f"{tree}/boot/grub2/fonts", exist_ok=True)
    shutil.copy2("/usr/share/grub/unicode.pf2", f"{tree}/boot/grub2/fonts/")


def write_grub_cfg(tree, path):
    """Write the grub config"""
    with open(os.path.join(tree, path), "w") as cfg:
        cfg.write("set timeout=0\n"
                  "load_env\n"
                  "search --no-floppy --fs-uuid --set=root ${GRUB2_ROOT_FS_UUID}\n"
                  "search --no-floppy --fs-uuid --set=boot ${GRUB2_BOOT_FS_UUID}\n"
                  "function load_video {\n"
                  "  insmod all_video\n"
                  "}\n"
                  "blscfg\n")


def main(tree, options):
    root_fs_uuid = options["root_fs_uuid"]
    kernel_opts = options.get("kernel_opts", "")
    legacy = options.get("legacy", True)
    uefi = options.get("uefi", None)

    # Create the configuration file that determines how grub.cfg is generated.
    os.makedirs(f"{tree}/etc/default", exist_ok=True)
    with open(f"{tree}/etc/default/grub", "w") as default:
        default.write("GRUB_TIMEOUT=0\n"
                      "GRUB_ENABLE_BLSCFG=true\n")

    os.makedirs(f"{tree}/boot/grub2", exist_ok=True)
    with open(f"{tree}/boot/grub2/grubenv", "w") as env:
        env.write("# GRUB Environment Block\n"
                  f"GRUB2_ROOT_FS_UUID={root_fs_uuid}\n"
                  f"GRUB2_BOOT_FS_UUID={root_fs_uuid}\n"
                  f"kernelopts=root=UUID={root_fs_uuid} {kernel_opts}\n")

    if legacy:
        write_grub_cfg(tree, "boot/grub2/grub.cfg")
        copy_modules(tree)
        copy_font(tree)

    if uefi is not None:
        # UEFI support:
        # The following files are needed for UEFI support:
        # /boot/efi/EFI/<vendor>/{grubenv, grub.cfg}
        # - grubenv should have been written to via the link from
        #     /boot/grub2/grubenv created by grub2-efi-{x64, ia32}.rpm
        # - grub.cfg needs to be generated
        vendor = uefi["vendor"]
        write_grub_cfg(tree, f"boot/efi/EFI/{vendor}/grub.cfg")

    return 0


if __name__ == '__main__':
    args = json.load(sys.stdin)
    r = main(args["tree"], args["options"])
    sys.exit(r)
