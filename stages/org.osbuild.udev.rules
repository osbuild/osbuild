#!/usr/bin/python3
import os
import sys
from typing import Dict

import osbuild.api


def make_key(data: Dict):
    key = data["key"]

    if isinstance(key, str):
        name, arg = key, None
    else:
        name, arg = key["name"], key.get("arg")

    res = name
    if arg is not None:
        res += "{" + arg + "}"

    return res


def make_value(data: Dict):
    val = data["val"]
    return '"' + val.replace('"', r'\"') + '"'


def make_rule(data: Dict):
    for item in data:
        res = make_key(item)
        res += item["op"]
        res += make_value(item)
        yield res


def write_rule(f, rule: Dict):
    data = ", ".join(make_rule(rule))
    f.write(data + "\n")


def write_comment(f, comment: list):
    data = "\n".join(map(lambda c: f"# {c}", comment))
    f.write(data + "\n")


def main(tree, options):
    filename = options["filename"]
    rules = options["rules"]

    path = os.path.join(tree, filename.lstrip("/"))
    with open(path, "w", encoding="utf8") as f:
        for rule in rules:
            if isinstance(rule, dict):
                comment = rule.get("comment")
                if comment:
                    write_comment(f, comment)
            else:
                write_rule(f, rule)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
