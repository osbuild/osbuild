#!/usr/bin/python3
import os
import sys

import osbuild.api
from osbuild.util import ostree
from osbuild.util.mnt import MountGuard


def make_fs_identifier(desc):
    for key in ["uuid", "label"]:
        val = desc.get(key)
        if val:
            return f"{key.upper()}={val}"
    raise ValueError("unknown rootfs type")


def ostree_commit_deploy(tree, inputs, osname, remote, ref, kopts):
    if len(inputs) == 0:
        if not ref:
            raise ValueError("ref should be specified in options")
    elif len(inputs) == 1:
        if ref:
            raise ValueError("Should not specify ref if input was specified")

        # If we have an input then we need to pull_local() from the input
        # first before we deploy.
        source_repo, commits = ostree.parse_input_commits(inputs["commits"])
        target_repo = f"{tree}/ostree/repo"
        for commit, data in commits.items():
            ref = data.get("ref", commit)
            ostree.pull_local(source_repo, target_repo, remote, ref)

    if remote:
        ref = f"{remote}:{ref}"

    kargs = [f'--karg-append={v}' for v in kopts]
    ostree.cli("admin", "deploy", ref,
               *kargs, sysroot=tree, os=osname)


def main(tree, inputs, options):
    osname = options["osname"]
    rootfs = options.get("rootfs")
    mounts = options.get("mounts", [])
    kopts = options.get("kernel_opts", [])
    ref = options.get("ref", "")
    remote = options.get("remote")

    # schema should catch the case in which there are more
    # than one input but this adds a second layer of security
    if len(inputs) > 1:
        raise ValueError("Only one input accepted")

    if rootfs:
        rootfs_id = make_fs_identifier(rootfs)
        kopts += [f"root={rootfs_id}"]

    with MountGuard() as mounter:
        for mount in mounts:
            path = mount.lstrip("/")
            path = os.path.join(tree, path)
            mounter.mount(path, path)

        ostree_commit_deploy(tree, inputs, osname, remote, ref, kopts)


if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["inputs"],
             stage_args["options"])
    sys.exit(r)
