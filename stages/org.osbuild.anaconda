#!/usr/bin/python3
"""
Configure basic aspects of the anaconda installer

Create an anaconda configuration file `90-osbuild.conf` in
the folder `/etc/anaconda/conf.d` to configure anaconda.
"""

import os
import sys

import osbuild.api

SCHEMA = """
"additionalProperties": true,
"properties": {
  "kickstart-modules": {
    "type": "array",
    "description": "Kick start modules to enable",
    "items": {
      "type": "string",
      "pattern": "^[A-Za-z_.*-]+$"
    },
    "minItems": 1
  },
  "optional-modules": {
    "type": "array",
    "description": "Optional modules to enable",
    "items": {
      "type": "string",
      "pattern": "^[A-Za-z_.*-]+$"
    },
    "minItems": 1
  },
  "forbidden-modules": {
    "type": "array",
    "description": "Modules to forbid",
    "items": {
      "type": "string",
      "pattern": "^[A-Za-z_.*-]+$"
    },
    "minItems": 1
  },
  "activatable-modules": {
    "type": "array",
    "description": "Modules to activate",
    "items": {
      "type": "string",
      "pattern": "^[A-Za-z_.*-]+$"
    },
    "minItems": 1
  }
}
"""

CONFIG = """
# osbuild customizations

[Anaconda]
"""


def main(tree, options):
    product_dir = os.path.join(tree, "etc/anaconda/conf.d")
    os.makedirs(product_dir, exist_ok=True)

    with open(os.path.join(product_dir, "90-osbuild.conf"), "w", encoding="utf8") as f:
        f.write(CONFIG)

        if "kickstart-modules" in options:
            f.write("kickstart_modules =\n")

            for m in options["kickstart-modules"]:
                f.write(f"    {m}\n")

        if "activatable-modules" in options:
            f.write("activatable_modules =\n")

            for m in options["activatable-modules"]:
                f.write(f"    {m}\n")

        if "forbidden-modules" in options:
            f.write("forbidden_modules =\n")

            for m in options["forbidden-modules"]:
                f.write(f"    {m}\n")

        if "optional-modules" in options:
            f.write("optional_modules =\n")

            for m in options["optional-modules"]:
                f.write(f"    {m}\n")


if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["options"])
    sys.exit(r)
