#!/usr/bin/python3
import configparser
import os
import sys

import osbuild.api


def main(tree, options):
    unit = options["unit"]
    dropin_file = options["dropin"]
    cfg = options["config"]
    unit_type = options.get("unit-type", "system")

    # ensure the unit name + ".d" does not exceed maximum filename length
    if len(unit + ".d") > 255:
        raise ValueError(f"Error: the {unit} unit drop-in directory exceeds the maximum filename length.")

    if unit_type == "system":
        unit_dropins_dir = f"{tree}/usr/lib/systemd/system/{unit}.d"
    elif unit_type == "global":
        unit_dropins_dir = f"{tree}/usr/lib/systemd/user/{unit}.d"
    else:
        print(f"Error: Unknown unit type: {unit_type}")
        return 1

    os.makedirs(unit_dropins_dir, exist_ok=True)

    # We trick configparser into letting us write multiple instances of the same option by writing them as keys with no
    # value, so we enable allow_no_value
    config = configparser.ConfigParser(allow_no_value=True, interpolation=None)
    # prevent conversion of the option name to lowercase
    config.optionxform = lambda option: option

    for section, opts in cfg.items():
        if not config.has_section(section):
            config.add_section(section)
        for option, value in opts.items():
            if isinstance(value, list):
                for v in value:
                    if option == "Environment":
                        # Environment arrays are objects
                        # Option value becomes "KEY=VALUE" (quoted)
                        v = '"' + v["key"] + "=" + str(v["value"]) + '"'
                    config.set(section, str(option) + "=" + str(v))
            else:
                config.set(section, option, str(value))

    with open(f"{unit_dropins_dir}/{dropin_file}", "w", encoding="utf8") as f:
        config.write(f, space_around_delimiters=False)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
