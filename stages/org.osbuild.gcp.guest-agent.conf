#!/usr/bin/python3
"""
Crate or modify the GCP guest-agent config

Create or modify the GCP guest-agent config, depending on the
scope either at:
  /etc/default/instance_configs.cfg.distro or
  /etc/default/instance_configs.cfg

Configuration sections and options may contain any of these values:
https://github.com/GoogleCloudPlatform/guest-agent#configuration
"""

import os
import sys

import iniparse

import osbuild.api


SCHEMA = r"""
"definitions": {
  "Accounts": {
    "type": "object",
    "additionalProperties": false,
    "description": "Accounts section.",
    "minProperties": 1,
    "properties": {
      "deprovision_remove": {
        "type": "boolean",
        "description": "Makes deprovisioning a user destructive."
      },
      "groups": {
        "type": "array",
        "description": "List of groups for newly provisioned users."
      },
      "useradd_cmd": {
        "type": "string",
        "description": "Command string to create a new user."
      },
      "userdel_cmd": {
        "type": "string",
        "description": "Command string to delete a user."
      },
      "usermod_cmd": {
        "type": "string",
        "description": "Command string to modify a user's groups."
      },
      "gpasswd_add_cmd": {
        "type": "string",
        "description": "Command string to add a user to a group."
      },
      "gpasswd_remove_cmd": {
        "type": "string",
        "description": "Command string to remove a user from a group."
      },
      "groupadd_cmd": {
        "type": "string",
        "description": "Command string to create a new group."
      }
    }
  },
  "Daemons": {
    "type": "object",
    "additionalProperties": false,
    "description": "Daemons section.",
    "minProperties": 1,
    "properties": {
      "accounts_daemon": {
        "type": "boolean",
        "description": "Disables the accounts daemon."
      },
      "clock_skew_daemon": {
        "type": "boolean",
        "description": "Disables the clock skew daemon."
      },
      "network_daemon": {
        "type": "boolean",
        "description": "Disables the network daemon."
      }
    }
  },
  "InstanceSetup": {
    "type": "object",
    "additionalProperties": false,
    "description": "InstanceSetup section.",
    "minProperties": 1,
    "properties": {
      "host_key_types": {
        "type": "array",
        "description": "List of host key types to generate."
      },
      "optimize_local_ssd": {
        "type": "boolean",
        "description": "Prevents optimizing for local SSD."
      },
      "network_enabled": {
        "type": "boolean",
        "description": "Skips instance setup functions that require metadata."
      },
      "set_boto_config": {
        "type": "boolean",
        "description": "Skip setting up a boto config."
      },
      "set_host_keys": {
        "type": "boolean",
        "description": "Skips generating host keys on first boot."
      },
      "set_multiqueue": {
        "type": "boolean",
        "description": "Skips multiqueue driver support."
      }
    }
  },
  "IpForwarding": {
    "type": "object",
    "additionalProperties": false,
    "description": "IpForwarding section.",
    "minProperties": 1,
    "properties": {
      "ethernet_proto_id": {
        "type": "string",
        "description": "Protocol ID string for daemon added routes."
      },
      "ip_aliases": {
        "type": "boolean",
        "description": "Disables setting up alias IP routes."
      },
      "target_instance_ips": {
        "type": "boolean",
        "description": "Disables internal IP address load balancing."
      }
    }
  },
  "MetadataScripts": {
    "type": "object",
    "additionalProperties": false,
    "description": "MetadataScripts section.",
    "minProperties": 1,
    "properties": {
      "default_shell": {
        "type": "string",
        "description": "String with the default shell to execute scripts."
      },
      "run_dir": {
        "type": "string",
        "description": "String base directory where metadata scripts are executed."
      },
      "startup": {
        "type": "boolean",
        "description": "Disables startup script execution."
      },
      "shutdown": {
        "type": "boolean",
        "description": "Disables shutdown script execution."
      }
    }
  },
  "NetworkInterfaces": {
    "type": "object",
    "additionalProperties": false,
    "description": "NetworkInterfaces section.",
    "minProperties": 1,
    "properties": {
      "setup": {
        "type": "boolean",
        "description": "Skips network interface setup."
      },
      "ip_forwarding": {
        "type": "boolean",
        "description": "Skips IP forwarding."
      },
      "dhcp_command": {
        "type": "string",
        "description": "Path for alternate dhcp executable used to enable network interfaces."
      }
    }
  }
},
"additionalProperties": false,
"required": ["config"],
"description": "Configure GCP guest-agent.",
"properties": {
  "config_scope": {
    "type": "string",
    "description": "Create distro-wide or instance-specific configuration.",
    "enum": ["distro", "instance"],
    "default": "distro"
  },
  "config": {
    "type": "object",
    "additionalProperties": false,
    "description": "GCP guest-agent configuration.",
    "minProperties": 1,
    "properties": {
      "Accounts": {
        "$ref": "#/definitions/Accounts"
      },
      "Daemons": {
        "$ref": "#/definitions/Daemons"
      },
      "InstanceSetup": {
        "$ref": "#/definitions/InstanceSetup"
      },
      "IpForwarding": {
        "$ref": "#/definitions/IpForwarding"
      },
      "MetadataScripts": {
        "$ref": "#/definitions/MetadataScripts"
      },
      "NetworkInterfaces": {
        "$ref": "#/definitions/NetworkInterfaces"
      }
    }
  }
}
"""


def option_value_to_str(value):
    """
    Convert allowed types of option values to string.

    The instance_configs.cfg allows comma seperated string lists as an option value.
    """
    if isinstance(value, list):
        value = ", ".join(value)
    elif isinstance(value, bool):
        value = "true" if value else "false"
    elif not isinstance(value, str):
        value = str(value)
    return value


def make_section(cfg, name, settings):
    if not cfg.has_section(name):
        cfg.add_section(name)

    for key, value in settings.items():
        val = option_value_to_str(value)
        cfg.set(name, key, val)


def main(tree, options):
    scope = options.get("config_scope")
    config = options.get("config")

    instance_config_dir = f"{tree}/etc/default"
    os.makedirs(instance_config_dir, exist_ok=True)

    if scope == "distro":
        filepath = instance_config_dir + "/instance_configs.cfg.distro"
    else:
        filepath = instance_config_dir + "/instance_configs.cfg"

    parser = iniparse.SafeConfigParser()

    try:
        with open(filepath, "r", encoding="utf-8") as f:
            parser.readfp(f)
    except FileNotFoundError:
        print(f"Creating new guest-agent configuration file at '{filepath}'.")
        os.makedirs(instance_config_dir, exist_ok=True)

    for section_id, section_content in config.items():
        make_section(parser, section_id, section_content)

    with open(filepath, "w", encoding="utf-8") as f:
        parser.write(f)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
