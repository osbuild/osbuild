#!/usr/bin/python3
import configparser
import os
import sys

import osbuild.api


def make_value(value):
    if isinstance(value, list):
        val = ",".join(value)
    elif isinstance(value, bool):
        val = "true" if value else "false"
    else:
        val = str(value)
    return val


def make_section(cfg, name, settings):
    if not cfg.has_section(name):
        cfg.add_section(name)

    for key, value in settings.items():
        val = make_value(value)
        cfg.set(name, key, val)


def make_named_section(cfg, name: str, section):

    config = section["config"]
    suffix = section.get("name")
    if suffix:
        name = f"{name}-{suffix}"

    make_section(cfg, name, config)


def main(tree, options):
    path = options["path"]
    settings = options["settings"]

    cfgfile = os.path.join(tree, path.lstrip("/"))

    cfgpath = os.path.dirname(cfgfile)
    os.makedirs(cfgpath, exist_ok=True)

    cfg = configparser.ConfigParser()
    cfg.optionxform = lambda o: o

    for name, items in settings.items():

        if isinstance(items, dict):
            make_section(cfg, name, items)
        elif isinstance(items, list):
            for item in items:
                make_named_section(cfg, name, item)
        else:
            raise ValueError(f"Invalid section type: {type(items)}")

    with open(cfgfile, "w", encoding="utf8") as f:
        os.fchmod(f.fileno(), 0o600)
        cfg.write(f, space_around_delimiters=False)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
