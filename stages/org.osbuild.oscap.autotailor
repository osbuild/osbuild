#!/usr/bin/python3
import subprocess
import sys

import osbuild.api


def main(tree, options):
    # required vars
    config = options["config"]
    filepath = options["filepath"]
    datastream = config["datastream"]

    profile = config.get("profile_id")
    new_profile = config.get("new_profile")
    tailoring_file = config.get("tailoring_file")
    # use `new_profile` as a fallback for backwards compatibility
    tailored_profile_id = config.get("tailored_profile_id", new_profile)

    if new_profile is not None:
        print("WARNING: use the `tailored_profile_id` option instead")

    # this is needed now since we have renamed the `new_profile` option
    # to `tailored_profile_id`
    if not tailored_profile_id:
        raise ValueError("The tailoring profile id option is a required field")

    # make sure either profile or tailoring_file is set
    if not (profile or tailoring_file):
        raise ValueError("Either profile must be set or a filepath to json tailoring file must be provided")

    if tailoring_file:
        cmd = [
            "/usr/bin/autotailor",
            "--output", f"{tree}/{filepath.lstrip('/')}",
            "--new-profile-id", tailored_profile_id,
            "--json-tailoring", f"{tree}/{tailoring_file.lstrip('/')}",
            datastream,
        ]

        subprocess.run(cmd, encoding="utf8", stdout=sys.stderr, check=True)
        return 0

    # tailoring rules
    selected = config.get("selected", [])
    unselected = config.get("unselected", [])
    overrides = config.get("overrides", [])

    cmd = [
        "/usr/bin/autotailor",
        "--output", f"{tree}/{filepath.lstrip('/')}",
        "--new-profile-id", tailored_profile_id,
    ]

    for s in selected:
        cmd.extend(["--select", s])

    for u in unselected:
        cmd.extend(["--unselect", u])

    for o in overrides:
        cmd.extend(["--var-value", f"{o['var']}={o['value']}"])

    # first positional arguement is for the datastream
    # second positional arguement is for the base profile
    cmd.extend([datastream, profile])

    subprocess.run(cmd, encoding="utf8", stdout=sys.stderr, check=True)

    return 0


if __name__ == "__main__":
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
