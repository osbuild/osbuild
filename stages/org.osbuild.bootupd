#!/usr/bin/python3
import contextlib
import json
import os
import subprocess
import sys

import osbuild.api
from osbuild.util import ostree


@contextlib.contextmanager
def bind_mounts(sources, dest_root):
    for src in sources:
        dst = os.path.join(dest_root, src.lstrip("/"))
        subprocess.run(["mount", "--rbind", src, dst], check=True)
    try:
        yield
    finally:
        for src in reversed(sources):
            dst = os.path.join(dest_root, src.lstrip("/"))
            subprocess.run(["umount", "--recursive", dst], check=False)


def main(args, options):
    deployment = options.get("deployment", None)
    static_configs = options.get("static-configs", False)
    bios = options.get("bios", {})
    device = bios.get("device", "")
    partition = bios.get("partition", None)

    # Get the path where the filesystems are mounted
    mounts = args["paths"]["mounts"]

    # Get the deployment root. For non-OSTree this is simply
    # the root location of the mount points. For OSTree systems
    # we'll call ostree.deployment_path() helper to find it for us.
    root = mounts
    if deployment:
        osname, ref, serial = ostree.parse_deployment_option(mounts, deployment)
        root = ostree.deployment_path(mounts, osname, ref, serial)

    bootupd_args = []
    if device:
        # The value passed by the user is the name of the device
        # as specified in the devices array (also passed in by the
        # user). Let's map that name to the actual loopback device
        # that now backs it.
        target = args["devices"][device]["path"]
        # If we are targeting a partition on the device rather than
        # the whole device itself (i.e. MBR) then let's find that
        # partition's device.
        if partition:
            cp = subprocess.run(["sfdisk", "--json", target],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT,
                                encoding='utf8',
                                check=True)
            disk_table = json.loads(cp.stdout)["partitiontable"]
            disk_parts = disk_table["partitions"]
            index = partition - 1  # partition index starts at 0
            target = disk_parts[index]["node"]
        bootupd_args.append(f"--device={target}")
    if static_configs:
        bootupd_args.append("--with-static-configs")

    # We want to run the bootupctl command from the target (i.e. we
    # want to make sure the version used matches the target and not
    # risk any inconsistencies with the build root). Let's set up
    # and chroot to run the bootupctl command from the target.
    with bind_mounts(['/dev', '/proc', '/sys', '/run', '/var', '/tmp'], root):
        cmd = ['chroot', root, '/usr/bin/bootupctl', 'backend', 'install']
        cmd.extend(bootupd_args)
        cmd.append(mounts)
        subprocess.run(cmd, check=True)

    return 0


if __name__ == '__main__':
    _args = osbuild.api.arguments()
    r = main(_args, _args["options"])
    sys.exit(r)
