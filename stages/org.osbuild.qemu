#!/usr/bin/python3
import os
import subprocess
import sys

import osbuild.api


def qcow2_arguments(options):
    argv = []
    compression = options.get("compression", True)
    compat = options.get("compat")

    if compression:
        argv += ["-c"]

    if compat:
        argv += ["-o", f"compat={compat}"]
    return argv


def vmdk_arguments(options):
    argv = []
    adapter_type = options.get("adapter_type")
    compat6 = options.get("compat6", False)
    compression = options.get("compression", True)
    subformat = options.get("subformat")

    if compression:
        argv += ["-c"]

    if compat6 or subformat or adapter_type:
        opts = []
        if adapter_type:
            opts += [f"adapter_type={adapter_type}"]
        if compat6:
            opts += ["compat6"]
        if subformat:
            opts += [f"subformat={subformat}"]
        argv += ["-o", ",".join(opts)]

    return argv


def vpc_arguments(options):
    subformat = options.get("subformat", "fixed")
    opts = [f"subformat={subformat}"]

    if options.get("force_size", True):
        opts += ["force_size"]

    return ["-o", ",".join(opts)]


def parse_input(inputs):
    image = inputs["image"]
    files = image["data"]["files"]
    assert len(files) == 1

    filename, _ = files.popitem()
    filepath = os.path.join(image["path"], filename)
    return filepath


def main(inputs, output, options):
    filename = options["filename"].lstrip("/")
    fmt = options["format"]

    source = parse_input(inputs)
    target = os.path.join(output, filename)

    formats = {
        "qcow2": qcow2_arguments,
        "vdi": [],
        "vmdk": vmdk_arguments,
        "vpc": vpc_arguments,
        "vhdx": []
    }

    extra_args = formats[fmt["type"]]

    if callable(extra_args):
        extra_args = extra_args(fmt)

    coroutines = os.environ.get("OSBUILD_QEMU_IMG_COROUTINES")
    if coroutines:
        print(f"qemu-img coroutines: {coroutines}")
        extra_args += ["-m", coroutines]

    cmd = [
        "qemu-img", "convert",
        "-O", fmt["type"],
        *extra_args,
        source, target
    ]

    subprocess.run(
        cmd, check=True
    )

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["tree"], args["options"])
    sys.exit(r)
