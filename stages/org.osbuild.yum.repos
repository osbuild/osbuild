#!/usr/bin/python3
import configparser
import os
import sys

import osbuild.api


# List of repo options which should be listed in this specific order if set
# in the stage options.
#
# Reasoning: repo configurations as shipped by distributions or created by
# various tools (COPR, RHSM) tend to order some options in a specific way,
# therefore if we just iterated over the dictionary items, the order would
# be different than how are repository configurations usually structured.
SPECIFIC_ORDER_OPTIONS = [
    "name",
    "baseurl",
    "metalink",
    "mirrorlist",
    "enabled",
    "gpgcheck",
    "repo_gpgcheck",
    "gpgkey"
]


def option_value_to_str(value):
    """
    Convert allowed types of option values to string.

    DNF allows string lists as a option value.
    'dnf.conf' man page says:
    "list   It is an option that could represent one or more strings separated by space or comma characters."
    """
    if isinstance(value, list):
        value = " ".join(value)
    elif isinstance(value, bool):
        value = "1" if value else "0"
    elif not isinstance(value, str):
        value = str(value)
    return value


def main(tree, options):
    filename = options.get("filename")
    repos = options.get("repos")

    yum_repos_dir = f"{tree}/etc/yum.repos.d"
    os.makedirs(yum_repos_dir, exist_ok=True)

    parser = configparser.ConfigParser()

    for repo in repos:
        repo_id = repo.pop("id")
        parser.add_section(repo_id)
        # Set some options in a specific order in which they tend to be
        # written in repo files.
        for option in SPECIFIC_ORDER_OPTIONS:
            option_value = repo.pop(option, None)
            if option_value is not None:
                parser.set(repo_id, option, option_value_to_str(option_value))

        for key, value in repo.items():
            parser.set(repo_id, key, option_value_to_str(value))

    # ensure that we won't overwrite an existing file
    with open(f"{yum_repos_dir}/{filename}", "x", encoding="utf8") as f:
        parser.write(f, space_around_delimiters=False)

    return 0


if __name__ == '__main__':
    args = osbuild.api.arguments()
    r = main(args["tree"], args["options"])
    sys.exit(r)
