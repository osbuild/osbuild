pipeline {
    agent none

    environment {
        AWS_REGION = "us-east-2"
    }

    options {
        ansiColor('xterm')
        timestamps()
    }

    stages {
        stage("Mock") {
            // Halt the entire pipeline if a single RPM build fails. That
            // could indicate a code problem that needs to be investigated.
            failFast true

            parallel {
                stage('Fedora 31') {
                    agent { label "f31 && minimal" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        sh "schutzbot/mockbuild.sh"
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'fedora31'
                        )
                    }
                }
                stage('Fedora 32') {
                    agent { label "f32 && minimal" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        sh "schutzbot/mockbuild.sh"
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'fedora32'
                        )
                    }
                }
                stage('RHEL 8 CDN') {
                    agent { label "rhel8cdn && minimal" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        sh "schutzbot/mockbuild.sh"
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'rhel8cdn'
                        )
                    }
                }
                // NOTE(mhayden): RHEL 8.3 is only available in PSI for now.
                stage('RHEL 8.3 Nightly') {
                    agent { label "rhel83nightly && minimal" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        NIGHTLY_REPO = credentials('rhel8-nightly-repo')
                        NIGHTLY_MOCK_TEMPLATE = credentials('rhel8-nightly-mock-template')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        sh "schutzbot/mockbuild.sh"
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'rhel83'
                        )
                    }
                }
            }
        }
        stage("Functional Testing") {
            // Allow the other stages to finish if a single stage fails.
            failFast false

            parallel {
                stage('Fedora 31') {
                    agent { label "fedora31 && psi" }
                    environment { TEST_TYPE = "image" }
                    steps {
                        unstash 'fedora31'
                        run_tests()
                    }
                    post {
                        always {
                            preserve_logs('fedora31-image')
                        }
                    }
                }
                stage('Fedora 32') {
                    agent { label "fedora32 && psi" }
                    environment { TEST_TYPE = "image" }
                    steps {
                        unstash 'fedora32'
                        run_tests()
                    }
                    post {
                        always {
                            preserve_logs('fedora32-image')
                        }
                    }
                }
                stage('RHEL 8 CDN') {
                    agent { label "rhel8 && psi" }
                    environment { TEST_TYPE = "image" }
                    steps {
                        unstash 'rhel8cdn'
                        run_tests()
                    }
                    post {
                        always {
                            preserve_logs('rhel8-image')
                        }
                    }
                }
            }
        }
    }
}

// Set up a function to hold the steps needed to run the tests so we don't
// need to copy/paste the same lines over and over above.
void run_tests() {

    // Get CI machine details.
    sh (
        label: "Get CI machine details",
        script: "schutzbot/ci_details.sh"
    )

    // Deploy the Image Builder packages and services.
    sh (
        label: "Deploy",
        script: "schutzbot/deploy.sh"
    )

    // Run the image tests.
    sh (
        label: "Image tests",
        script: "schutzbot/run_image_tests.sh"
    )

}

// Move logs to a unique location and tell Jenkins to capture them on success
// or failure.
void preserve_logs(test_slug) {

    // Save the systemd journal.
    sh "sudo journalctl --boot > systemd-journald.log"

    // Find any AVCs in the audit log and save those.
    sh "sudo grep AVC /var/log/audit/audit.log > selinux-avc.log"

    // Make a directory for the log files and move the logs there.
    sh "mkdir ${test_slug} && mv *.log *.jpg ${test_slug}/ || true"

    // Artifact the logs.
    archiveArtifacts (
        allowEmptyArchive: true,
        artifacts: "${test_slug}/*.log,${test_slug}/*.jpg"
    )

}
